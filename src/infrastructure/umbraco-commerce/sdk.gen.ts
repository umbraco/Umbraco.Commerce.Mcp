// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client/index.js';
import type { GetActivityLogEntriesByStoreIdData, GetActivityLogEntriesByStoreIdResponses, GetActivityLogEntriesByStoreIdErrors, GetActivityLogEntriesByEntityIdAndTypeData, GetActivityLogEntriesByEntityIdAndTypeResponses, GetActivityLogEntriesByEntityIdAndTypeErrors, GetAbandonedCartConversionRatesData, GetAbandonedCartConversionRatesResponses, GetAbandonedCartConversionRatesErrors, GetAverageOrderValueData, GetAverageOrderValueResponses, GetAverageOrderValueErrors, GetCartConversionRatesData, GetCartConversionRatesResponses, GetCartConversionRatesErrors, GetRepeatCustomerRatesData, GetRepeatCustomerRatesResponses, GetRepeatCustomerRatesErrors, GetTopSellingProductsData, GetTopSellingProductsResponses, GetTopSellingProductsErrors, GetTotalOrdersData, GetTotalOrdersResponses, GetTotalOrdersErrors, GetTotalRevenueData, GetTotalRevenueResponses, GetTotalRevenueErrors, GetCartsData, GetCartsResponses, GetCartsErrors, CreateCartData, CreateCartResponses, CreateCartErrors, DeleteCartByIdData, DeleteCartByIdResponses, DeleteCartByIdErrors, GetCartByIdData, GetCartByIdResponses, GetCartByIdErrors, UpdateCartByIdData, UpdateCartByIdResponses, UpdateCartByIdErrors, CalculateCartByIdData, CalculateCartByIdResponses, CalculateCartByIdErrors, CalculateCartPaymentMethodsByIdData, CalculateCartPaymentMethodsByIdResponses, CalculateCartPaymentMethodsByIdErrors, CalculateCartShippingMethodsByIdData, CalculateCartShippingMethodsByIdResponses, CalculateCartShippingMethodsByIdErrors, FinalizeCartData, FinalizeCartResponses, FinalizeCartErrors, GenerateCartPaymentLinkByIdData, GenerateCartPaymentLinkByIdResponses, GenerateCartPaymentLinkByIdErrors, ProcessAbandonedCartData, ProcessAbandonedCartResponses, ProcessAbandonedCartErrors, GetCartAdvancedFiltersData, GetCartAdvancedFiltersResponses, GetCartAdvancedFiltersErrors, GetStoreByContentNodeIdData, GetStoreByContentNodeIdResponses, GetStoreByContentNodeIdErrors, GetCountriesData, GetCountriesResponses, GetCountriesErrors, CreateCountryData, CreateCountryResponses, CreateCountryErrors, DeleteCountryByIdOrCodeData, DeleteCountryByIdOrCodeResponses, DeleteCountryByIdOrCodeErrors, GetCountryByIdOrCodeData, GetCountryByIdOrCodeResponses, GetCountryByIdOrCodeErrors, UpdateCountryByIdOrCodeData, UpdateCountryByIdOrCodeResponses, UpdateCountryByIdOrCodeErrors, GetRegionsData, GetRegionsResponses, GetRegionsErrors, CreateRegionData, CreateRegionResponses, CreateRegionErrors, DeleteRegionByIdOrCodeData, DeleteRegionByIdOrCodeResponses, DeleteRegionByIdOrCodeErrors, GetRegionByIdOrCodeData, GetRegionByIdOrCodeResponses, GetRegionByIdOrCodeErrors, UpdateRegionByIdOrCodeData, UpdateRegionByIdOrCodeResponses, UpdateRegionByIdOrCodeErrors, AutoCreateRegionsData, AutoCreateRegionsResponses, AutoCreateRegionsErrors, CreateRegionScaffoldData, CreateRegionScaffoldResponses, CreateRegionScaffoldErrors, SortRegionsData, SortRegionsResponses, SortRegionsErrors, AutoCreateCountriesAndRegionsData, AutoCreateCountriesAndRegionsResponses, AutoCreateCountriesAndRegionsErrors, GetIso3166CountriesData, GetIso3166CountriesResponses, GetIso3166CountriesErrors, CreateCountryScaffoldData, CreateCountryScaffoldResponses, CreateCountryScaffoldErrors, SortCountriesData, SortCountriesResponses, SortCountriesErrors, GetCurrenciesData, GetCurrenciesResponses, GetCurrenciesErrors, CreateCurrencyData, CreateCurrencyResponses, CreateCurrencyErrors, DeleteCurrencyByIdOrCodeData, DeleteCurrencyByIdOrCodeResponses, DeleteCurrencyByIdOrCodeErrors, GetCurrencyByIdOrCodeData, GetCurrencyByIdOrCodeResponses, GetCurrencyByIdOrCodeErrors, UpdateCurrencyByIdOrCodeData, UpdateCurrencyByIdOrCodeResponses, UpdateCurrencyByIdOrCodeErrors, CreateCurrencyScaffoldData, CreateCurrencyScaffoldResponses, CreateCurrencyScaffoldErrors, SortCurrenciesData, SortCurrenciesResponses, SortCurrenciesErrors, GetCustomerByReferenceOrEmailData, GetCustomerByReferenceOrEmailResponses, GetCustomerByReferenceOrEmailErrors, GetCustomerOrderHistoryByReferenceOrEmailData, GetCustomerOrderHistoryByReferenceOrEmailResponses, GetCustomerOrderHistoryByReferenceOrEmailErrors, CreateDictionaryItemData, CreateDictionaryItemResponses, CreateDictionaryItemErrors, UpdateDictionaryItemByIdData, UpdateDictionaryItemByIdResponses, UpdateDictionaryItemByIdErrors, GetDictionaryItemByKeyData, GetDictionaryItemByKeyResponses, GetDictionaryItemByKeyErrors, GetDiscountRewardProvidersData, GetDiscountRewardProvidersResponses, GetDiscountRewardProvidersErrors, GetDiscountRuleProvidersData, GetDiscountRuleProvidersResponses, GetDiscountRuleProvidersErrors, GetDiscountsData, GetDiscountsResponses, GetDiscountsErrors, CreateDiscountData, CreateDiscountResponses, CreateDiscountErrors, DeleteDiscountByIdOrAliasData, DeleteDiscountByIdOrAliasResponses, DeleteDiscountByIdOrAliasErrors, GetDiscountByIdOrAliasData, GetDiscountByIdOrAliasResponses, GetDiscountByIdOrAliasErrors, UpdateDiscountByIdOrAliasData, UpdateDiscountByIdOrAliasResponses, UpdateDiscountByIdOrAliasErrors, CreateDiscountScaffoldData, CreateDiscountScaffoldResponses, CreateDiscountScaffoldErrors, SortDiscountsData, SortDiscountsResponses, SortDiscountsErrors, GetEmailTemplatesData, GetEmailTemplatesResponses, GetEmailTemplatesErrors, CreateEmailTemplateData, CreateEmailTemplateResponses, CreateEmailTemplateErrors, DeleteEmailTemplateByIdOrAliasData, DeleteEmailTemplateByIdOrAliasResponses, DeleteEmailTemplateByIdOrAliasErrors, GetEmailTemplateByIdOrAliasData, GetEmailTemplateByIdOrAliasResponses, GetEmailTemplateByIdOrAliasErrors, UpdateEmailTemplateByIdOrAliasData, UpdateEmailTemplateByIdOrAliasResponses, UpdateEmailTemplateByIdOrAliasErrors, SendEmailTemplateByIdOrAliasData, SendEmailTemplateByIdOrAliasResponses, SendEmailTemplateByIdOrAliasErrors, CreateEmailTemplateScaffoldData, CreateEmailTemplateScaffoldResponses, CreateEmailTemplateScaffoldErrors, SortEmailTemplatesData, SortEmailTemplatesResponses, SortEmailTemplatesErrors, GetExportTemplatesData, GetExportTemplatesResponses, GetExportTemplatesErrors, CreateExportTemplateData, CreateExportTemplateResponses, CreateExportTemplateErrors, DeleteExportTemplateByIdOrAliasData, DeleteExportTemplateByIdOrAliasResponses, DeleteExportTemplateByIdOrAliasErrors, GetExportTemplateByIdOrAliasData, GetExportTemplateByIdOrAliasResponses, GetExportTemplateByIdOrAliasErrors, UpdateExportTemplateByIdOrAliasData, UpdateExportTemplateByIdOrAliasResponses, UpdateExportTemplateByIdOrAliasErrors, ExportData, ExportResponses, ExportErrors, CreateExportTemplateScaffoldData, CreateExportTemplateScaffoldResponses, CreateExportTemplateScaffoldErrors, SortExportTemplatesData, SortExportTemplatesResponses, SortExportTemplatesErrors, GetGiftCardsData, GetGiftCardsResponses, GetGiftCardsErrors, CreateGiftCardData, CreateGiftCardResponses, CreateGiftCardErrors, DeleteGiftCardByIdOrCodeData, DeleteGiftCardByIdOrCodeResponses, DeleteGiftCardByIdOrCodeErrors, GetGiftCardByIdOrCodeData, GetGiftCardByIdOrCodeResponses, GetGiftCardByIdOrCodeErrors, UpdateGiftCardByIdOrCodeData, UpdateGiftCardByIdOrCodeResponses, UpdateGiftCardByIdOrCodeErrors, GenerateGiftCardCodeData, GenerateGiftCardCodeResponses, GenerateGiftCardCodeErrors, CreateGiftCardScaffoldData, CreateGiftCardScaffoldResponses, CreateGiftCardScaffoldErrors, GetLocationsData, GetLocationsResponses, GetLocationsErrors, CreateLocationData, CreateLocationResponses, CreateLocationErrors, DeleteLocationByIdOrAliasData, DeleteLocationByIdOrAliasResponses, DeleteLocationByIdOrAliasErrors, GetLocationByIdOrAliasData, GetLocationByIdOrAliasResponses, GetLocationByIdOrAliasErrors, UpdateLocationByIdOrAliasData, UpdateLocationByIdOrAliasResponses, UpdateLocationByIdOrAliasErrors, CreateLocationScaffoldData, CreateLocationScaffoldResponses, CreateLocationScaffoldErrors, SortLocationsData, SortLocationsResponses, SortLocationsErrors, GetOrderStatusesData, GetOrderStatusesResponses, GetOrderStatusesErrors, CreateOrderStatusData, CreateOrderStatusResponses, CreateOrderStatusErrors, DeleteOrderStatusByIdOrAliasData, DeleteOrderStatusByIdOrAliasResponses, DeleteOrderStatusByIdOrAliasErrors, GetOrderStatusByIdOrAliasData, GetOrderStatusByIdOrAliasResponses, GetOrderStatusByIdOrAliasErrors, UpdateOrderStatusByIdOrAliasData, UpdateOrderStatusByIdOrAliasResponses, UpdateOrderStatusByIdOrAliasErrors, CreateOrderStatusScaffoldData, CreateOrderStatusScaffoldResponses, CreateOrderStatusScaffoldErrors, SortOrderStatusesData, SortOrderStatusesResponses, SortOrderStatusesErrors, GetOrdersData, GetOrdersResponses, GetOrdersErrors, DeleteOrderByIdData, DeleteOrderByIdResponses, DeleteOrderByIdErrors, GetOrderByIdData, GetOrderByIdResponses, GetOrderByIdErrors, UpdateOrderByIdData, UpdateOrderByIdResponses, UpdateOrderByIdErrors, CancelOrderPaymentByIdData, CancelOrderPaymentByIdResponses, CancelOrderPaymentByIdErrors, CaptureOrderPaymentByIdData, CaptureOrderPaymentByIdResponses, CaptureOrderPaymentByIdErrors, RefundOrderPaymentByIdData, RefundOrderPaymentByIdResponses, RefundOrderPaymentByIdErrors, RefundOrderPaymentByIdV2Data, RefundOrderPaymentByIdV2Responses, RefundOrderPaymentByIdV2Errors, GetOrderAdvancedFiltersData, GetOrderAdvancedFiltersResponses, GetOrderAdvancedFiltersErrors, GetPaymentMethodsData, GetPaymentMethodsResponses, GetPaymentMethodsErrors, CreatePaymentMethodData, CreatePaymentMethodResponses, CreatePaymentMethodErrors, DeletePaymentMethodByIdOrAliasData, DeletePaymentMethodByIdOrAliasResponses, DeletePaymentMethodByIdOrAliasErrors, GetPaymentMethodByIdOrAliasData, GetPaymentMethodByIdOrAliasResponses, GetPaymentMethodByIdOrAliasErrors, UpdatePaymentMethodByIdOrAliasData, UpdatePaymentMethodByIdOrAliasResponses, UpdatePaymentMethodByIdOrAliasErrors, CreatePaymentMethodScaffoldData, CreatePaymentMethodScaffoldResponses, CreatePaymentMethodScaffoldErrors, SortPaymentMethodsData, SortPaymentMethodsResponses, SortPaymentMethodsErrors, GetPaymentProvidersData, GetPaymentProvidersResponses, GetPaymentProvidersErrors, GetPaymentProviderByAliasData, GetPaymentProviderByAliasResponses, GetPaymentProviderByAliasErrors, GetPrintTemplatesData, GetPrintTemplatesResponses, GetPrintTemplatesErrors, CreatePrintTemplateData, CreatePrintTemplateResponses, CreatePrintTemplateErrors, DeletePrintTemplateByIdOrAliasData, DeletePrintTemplateByIdOrAliasResponses, DeletePrintTemplateByIdOrAliasErrors, GetPrintTemplateByIdOrAliasData, GetPrintTemplateByIdOrAliasResponses, GetPrintTemplateByIdOrAliasErrors, UpdatePrintTemplateByIdOrAliasData, UpdatePrintTemplateByIdOrAliasResponses, UpdatePrintTemplateByIdOrAliasErrors, RenderData, RenderResponses, RenderErrors, CreatePrintTemplateScaffoldData, CreatePrintTemplateScaffoldResponses, CreatePrintTemplateScaffoldErrors, SortPrintTemplatesData, SortPrintTemplatesResponses, SortPrintTemplatesErrors, GetProductAttributePresetsData, GetProductAttributePresetsResponses, GetProductAttributePresetsErrors, CreateProductAttributePresetData, CreateProductAttributePresetResponses, CreateProductAttributePresetErrors, DeleteProductAttributePresetByIdOrAliasData, DeleteProductAttributePresetByIdOrAliasResponses, DeleteProductAttributePresetByIdOrAliasErrors, GetProductAttributePresetByIdOrAliasData, GetProductAttributePresetByIdOrAliasResponses, GetProductAttributePresetByIdOrAliasErrors, UpdateProductAttributePresetByIdOrAliasData, UpdateProductAttributePresetByIdOrAliasResponses, UpdateProductAttributePresetByIdOrAliasErrors, CreateProductAttributePresetScaffoldData, CreateProductAttributePresetScaffoldResponses, CreateProductAttributePresetScaffoldErrors, SortProductAttributePresetsData, SortProductAttributePresetsResponses, SortProductAttributePresetsErrors, GetProductAttributesData, GetProductAttributesResponses, GetProductAttributesErrors, CreateProductAttributeData, CreateProductAttributeResponses, CreateProductAttributeErrors, DeleteProductAttributeByIdOrAliasData, DeleteProductAttributeByIdOrAliasResponses, DeleteProductAttributeByIdOrAliasErrors, GetProductAttributeByIdOrAliasData, GetProductAttributeByIdOrAliasResponses, GetProductAttributeByIdOrAliasErrors, UpdateProductAttributeByIdOrAliasData, UpdateProductAttributeByIdOrAliasResponses, UpdateProductAttributeByIdOrAliasErrors, CreateProductAttributeScaffoldData, CreateProductAttributeScaffoldResponses, CreateProductAttributeScaffoldErrors, SortProductAttributesData, SortProductAttributesResponses, SortProductAttributesErrors, GetProductByReferenceData, GetProductByReferenceResponses, GetProductByReferenceErrors, UpdateProductByReferenceData, UpdateProductByReferenceResponses, UpdateProductByReferenceErrors, GetProductVariantAttributesData, GetProductVariantAttributesResponses, GetProductVariantAttributesErrors, GetProductVariantByReferenceData, GetProductVariantByReferenceResponses, GetProductVariantByReferenceErrors, UpdateProductVariantByReferenceData, UpdateProductVariantByReferenceResponses, UpdateProductVariantByReferenceErrors, GetProductVariantStockByReferenceData, GetProductVariantStockByReferenceResponses, GetProductVariantStockByReferenceErrors, GetProductSummariesData, GetProductSummariesResponses, GetProductSummariesErrors, GetProductVariantSummariesData, GetProductVariantSummariesResponses, GetProductVariantSummariesErrors, GetSalesTaxProvidersData, GetSalesTaxProvidersResponses, GetSalesTaxProvidersErrors, GetSalesTaxProviderByAliasData, GetSalesTaxProviderByAliasResponses, GetSalesTaxProviderByAliasErrors, GetSessionData, GetSessionResponses, GetSessionErrors, GetShippingMethodsData, GetShippingMethodsResponses, GetShippingMethodsErrors, CreateShippingMethodData, CreateShippingMethodResponses, CreateShippingMethodErrors, DeleteShippingMethodByIdOrAliasData, DeleteShippingMethodByIdOrAliasResponses, DeleteShippingMethodByIdOrAliasErrors, GetShippingMethodByIdOrAliasData, GetShippingMethodByIdOrAliasResponses, GetShippingMethodByIdOrAliasErrors, UpdateShippingMethodByIdOrAliasData, UpdateShippingMethodByIdOrAliasResponses, UpdateShippingMethodByIdOrAliasErrors, CreateShippingMethodScaffoldData, CreateShippingMethodScaffoldResponses, CreateShippingMethodScaffoldErrors, SortShippingMethodsData, SortShippingMethodsResponses, SortShippingMethodsErrors, GetShippingProvidersData, GetShippingProvidersResponses, GetShippingProvidersErrors, GetShippingProviderByAliasData, GetShippingProviderByAliasResponses, GetShippingProviderByAliasErrors, GetShippingRateProvidersData, GetShippingRateProvidersResponses, GetShippingRateProvidersErrors, GetShippingRateRangeProvidersData, GetShippingRateRangeProvidersResponses, GetShippingRateRangeProvidersErrors, GetStoresData, GetStoresResponses, GetStoresErrors, CreateStoreData, CreateStoreResponses, CreateStoreErrors, DeleteStoreByIdOrAliasData, DeleteStoreByIdOrAliasResponses, DeleteStoreByIdOrAliasErrors, GetStoreByIdOrAliasData, GetStoreByIdOrAliasResponses, GetStoreByIdOrAliasErrors, UpdateStoreByIdOrAliasData, UpdateStoreByIdOrAliasResponses, UpdateStoreByIdOrAliasErrors, GetStoreStatsByIdOrAliasData, GetStoreStatsByIdOrAliasResponses, GetStoreStatsByIdOrAliasErrors, SortStoresData, SortStoresResponses, SortStoresErrors, GetTaxCalculationMethodsData, GetTaxCalculationMethodsResponses, GetTaxCalculationMethodsErrors, CreateTaxCalculationMethodData, CreateTaxCalculationMethodResponses, CreateTaxCalculationMethodErrors, DeleteTaxCalculationMethodByIdOrAliasData, DeleteTaxCalculationMethodByIdOrAliasResponses, DeleteTaxCalculationMethodByIdOrAliasErrors, GetTaxCalculationMethodByIdOrAliasData, GetTaxCalculationMethodByIdOrAliasResponses, GetTaxCalculationMethodByIdOrAliasErrors, UpdateTaxCalculationMethodByIdOrAliasData, UpdateTaxCalculationMethodByIdOrAliasResponses, UpdateTaxCalculationMethodByIdOrAliasErrors, CreateTaxCalculationMethodScaffoldData, CreateTaxCalculationMethodScaffoldResponses, CreateTaxCalculationMethodScaffoldErrors, SortTaxCalculationMethodsData, SortTaxCalculationMethodsResponses, SortTaxCalculationMethodsErrors, GetTaxClassesData, GetTaxClassesResponses, GetTaxClassesErrors, CreateTaxClassData, CreateTaxClassResponses, CreateTaxClassErrors, DeleteTaxClassByIdOrAliasData, DeleteTaxClassByIdOrAliasResponses, DeleteTaxClassByIdOrAliasErrors, GetTaxClassByIdOrAliasData, GetTaxClassByIdOrAliasResponses, GetTaxClassByIdOrAliasErrors, UpdateTaxClassByIdOrAliasData, UpdateTaxClassByIdOrAliasResponses, UpdateTaxClassByIdOrAliasErrors, CreateTaxClassScaffoldData, CreateTaxClassScaffoldResponses, CreateTaxClassScaffoldErrors, SortTaxClassesData, SortTaxClassesResponses, SortTaxClassesErrors, GetCulturesData, GetCulturesResponses, GetCulturesErrors, GetEnumOptionsByTypeData, GetEnumOptionsByTypeResponses, GetEnumOptionsByTypeErrors, GetExchangeRateServiceProviderData, GetExchangeRateServiceProviderResponses, GetExchangeRateServiceProviderErrors, GetLicensingStatusData, GetLicensingStatusResponses, GetLicensingStatusErrors, GetMediaFromUrlData, GetMediaFromUrlResponses, GetMediaFromUrlErrors } from './types.gen.js';
import { client as _heyApiClient } from './client.gen.js';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class ActivityLog {
    public static getActivityLogEntriesByStoreId<ThrowOnError extends boolean = true>(options?: Options<GetActivityLogEntriesByStoreIdData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetActivityLogEntriesByStoreIdResponses, GetActivityLogEntriesByStoreIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/activity-logs',
            ...options
        });
    }
    
    public static getActivityLogEntriesByEntityIdAndType<ThrowOnError extends boolean = true>(options: Options<GetActivityLogEntriesByEntityIdAndTypeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetActivityLogEntriesByEntityIdAndTypeResponses, GetActivityLogEntriesByEntityIdAndTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/activity-logs/{entityType}/{entityId}',
            ...options
        });
    }
}

export class Analytics {
    public static getAbandonedCartConversionRates<ThrowOnError extends boolean = true>(options?: Options<GetAbandonedCartConversionRatesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<GetAbandonedCartConversionRatesResponses, GetAbandonedCartConversionRatesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/analytics/abandoned-cart-conversion-rates',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getAverageOrderValue<ThrowOnError extends boolean = true>(options?: Options<GetAverageOrderValueData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<GetAverageOrderValueResponses, GetAverageOrderValueErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/analytics/average-order-value',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getCartConversionRates<ThrowOnError extends boolean = true>(options?: Options<GetCartConversionRatesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<GetCartConversionRatesResponses, GetCartConversionRatesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/analytics/cart-conversion-rates',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getRepeatCustomerRates<ThrowOnError extends boolean = true>(options?: Options<GetRepeatCustomerRatesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<GetRepeatCustomerRatesResponses, GetRepeatCustomerRatesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/analytics/repeat-customer-rates',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getTopSellingProducts<ThrowOnError extends boolean = true>(options?: Options<GetTopSellingProductsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<GetTopSellingProductsResponses, GetTopSellingProductsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/analytics/top-selling-products',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getTotalOrders<ThrowOnError extends boolean = true>(options?: Options<GetTotalOrdersData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<GetTotalOrdersResponses, GetTotalOrdersErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/analytics/total-orders',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getTotalRevenue<ThrowOnError extends boolean = true>(options?: Options<GetTotalRevenueData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<GetTotalRevenueResponses, GetTotalRevenueErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/analytics/total-revenue',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class Cart {
    public static getCarts<ThrowOnError extends boolean = true>(options?: Options<GetCartsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetCartsResponses, GetCartsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/carts',
            ...options
        });
    }
    
    public static createCart<ThrowOnError extends boolean = true>(options?: Options<CreateCartData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateCartResponses, CreateCartErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/carts',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteCartById<ThrowOnError extends boolean = true>(options: Options<DeleteCartByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteCartByIdResponses, DeleteCartByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/carts/{cartId}',
            ...options
        });
    }
    
    public static getCartById<ThrowOnError extends boolean = true>(options: Options<GetCartByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetCartByIdResponses, GetCartByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/carts/{cartId}',
            ...options
        });
    }
    
    public static updateCartById<ThrowOnError extends boolean = true>(options: Options<UpdateCartByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<UpdateCartByIdResponses, UpdateCartByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/carts/{cartId}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static calculateCartById<ThrowOnError extends boolean = true>(options: Options<CalculateCartByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<CalculateCartByIdResponses, CalculateCartByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/carts/{cartId}/calculate',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static calculateCartPaymentMethodsById<ThrowOnError extends boolean = true>(options: Options<CalculateCartPaymentMethodsByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<CalculateCartPaymentMethodsByIdResponses, CalculateCartPaymentMethodsByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/carts/{cartId}/calculate-payment-methods',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static calculateCartShippingMethodsById<ThrowOnError extends boolean = true>(options: Options<CalculateCartShippingMethodsByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<CalculateCartShippingMethodsByIdResponses, CalculateCartShippingMethodsByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/carts/{cartId}/calculate-shipping-methods',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static finalizeCart<ThrowOnError extends boolean = true>(options: Options<FinalizeCartData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<FinalizeCartResponses, FinalizeCartErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/carts/{cartId}/finalize',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static generateCartPaymentLinkById<ThrowOnError extends boolean = true>(options: Options<GenerateCartPaymentLinkByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<GenerateCartPaymentLinkByIdResponses, GenerateCartPaymentLinkByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/carts/{cartId}/payment-link',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static processAbandonedCart<ThrowOnError extends boolean = true>(options: Options<ProcessAbandonedCartData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<ProcessAbandonedCartResponses, ProcessAbandonedCartErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/carts/{cartId}/process-abandoned',
            ...options
        });
    }
    
    public static getCartAdvancedFilters<ThrowOnError extends boolean = true>(options?: Options<GetCartAdvancedFiltersData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetCartAdvancedFiltersResponses, GetCartAdvancedFiltersErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/carts/advanced-filters',
            ...options
        });
    }
}

export class Content {
    public static getStoreByContentNodeId<ThrowOnError extends boolean = true>(options: Options<GetStoreByContentNodeIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetStoreByContentNodeIdResponses, GetStoreByContentNodeIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/content/{unique}/store',
            ...options
        });
    }
}

export class Country {
    public static getCountries<ThrowOnError extends boolean = true>(options?: Options<GetCountriesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetCountriesResponses, GetCountriesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/countries',
            ...options
        });
    }
    
    public static createCountry<ThrowOnError extends boolean = true>(options?: Options<CreateCountryData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateCountryResponses, CreateCountryErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/countries',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteCountryByIdOrCode<ThrowOnError extends boolean = true>(options: Options<DeleteCountryByIdOrCodeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteCountryByIdOrCodeResponses, DeleteCountryByIdOrCodeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/countries/{countryIdOrCode}',
            ...options
        });
    }
    
    public static getCountryByIdOrCode<ThrowOnError extends boolean = true>(options: Options<GetCountryByIdOrCodeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetCountryByIdOrCodeResponses, GetCountryByIdOrCodeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/countries/{countryIdOrCode}',
            ...options
        });
    }
    
    public static updateCountryByIdOrCode<ThrowOnError extends boolean = true>(options: Options<UpdateCountryByIdOrCodeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<UpdateCountryByIdOrCodeResponses, UpdateCountryByIdOrCodeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/countries/{countryIdOrCode}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getRegions<ThrowOnError extends boolean = true>(options: Options<GetRegionsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetRegionsResponses, GetRegionsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/countries/{countryIdOrCode}/regions',
            ...options
        });
    }
    
    public static createRegion<ThrowOnError extends boolean = true>(options: Options<CreateRegionData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<CreateRegionResponses, CreateRegionErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/countries/{countryIdOrCode}/regions',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static deleteRegionByIdOrCode<ThrowOnError extends boolean = true>(options: Options<DeleteRegionByIdOrCodeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteRegionByIdOrCodeResponses, DeleteRegionByIdOrCodeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/countries/{countryIdOrCode}/regions/{regionIdOrCode}',
            ...options
        });
    }
    
    public static getRegionByIdOrCode<ThrowOnError extends boolean = true>(options: Options<GetRegionByIdOrCodeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetRegionByIdOrCodeResponses, GetRegionByIdOrCodeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/countries/{countryIdOrCode}/regions/{regionIdOrCode}',
            ...options
        });
    }
    
    public static updateRegionByIdOrCode<ThrowOnError extends boolean = true>(options: Options<UpdateRegionByIdOrCodeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<UpdateRegionByIdOrCodeResponses, UpdateRegionByIdOrCodeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/countries/{countryIdOrCode}/regions/{regionIdOrCode}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static autoCreateRegions<ThrowOnError extends boolean = true>(options: Options<AutoCreateRegionsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<AutoCreateRegionsResponses, AutoCreateRegionsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/countries/{countryIdOrCode}/regions/auto',
            ...options
        });
    }
    
    public static createRegionScaffold<ThrowOnError extends boolean = true>(options: Options<CreateRegionScaffoldData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<CreateRegionScaffoldResponses, CreateRegionScaffoldErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/countries/{countryIdOrCode}/regions/scaffold',
            ...options
        });
    }
    
    public static sortRegions<ThrowOnError extends boolean = true>(options: Options<SortRegionsData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<SortRegionsResponses, SortRegionsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/countries/{countryIdOrCode}/regions/sort',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static autoCreateCountriesAndRegions<ThrowOnError extends boolean = true>(options?: Options<AutoCreateCountriesAndRegionsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<AutoCreateCountriesAndRegionsResponses, AutoCreateCountriesAndRegionsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/countries/auto',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static getIso3166Countries<ThrowOnError extends boolean = true>(options?: Options<GetIso3166CountriesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetIso3166CountriesResponses, GetIso3166CountriesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/countries/iso3166',
            ...options
        });
    }
    
    public static createCountryScaffold<ThrowOnError extends boolean = true>(options?: Options<CreateCountryScaffoldData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateCountryScaffoldResponses, CreateCountryScaffoldErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/countries/scaffold',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static sortCountries<ThrowOnError extends boolean = true>(options?: Options<SortCountriesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<SortCountriesResponses, SortCountriesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/countries/sort',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class Currency {
    public static getCurrencies<ThrowOnError extends boolean = true>(options?: Options<GetCurrenciesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetCurrenciesResponses, GetCurrenciesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/currencies',
            ...options
        });
    }
    
    public static createCurrency<ThrowOnError extends boolean = true>(options?: Options<CreateCurrencyData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateCurrencyResponses, CreateCurrencyErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/currencies',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteCurrencyByIdOrCode<ThrowOnError extends boolean = true>(options: Options<DeleteCurrencyByIdOrCodeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteCurrencyByIdOrCodeResponses, DeleteCurrencyByIdOrCodeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/currencies/{currencyIdOrCode}',
            ...options
        });
    }
    
    public static getCurrencyByIdOrCode<ThrowOnError extends boolean = true>(options: Options<GetCurrencyByIdOrCodeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetCurrencyByIdOrCodeResponses, GetCurrencyByIdOrCodeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/currencies/{currencyIdOrCode}',
            ...options
        });
    }
    
    public static updateCurrencyByIdOrCode<ThrowOnError extends boolean = true>(options: Options<UpdateCurrencyByIdOrCodeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<UpdateCurrencyByIdOrCodeResponses, UpdateCurrencyByIdOrCodeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/currencies/{currencyIdOrCode}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static createCurrencyScaffold<ThrowOnError extends boolean = true>(options?: Options<CreateCurrencyScaffoldData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateCurrencyScaffoldResponses, CreateCurrencyScaffoldErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/currencies/scaffold',
            ...options
        });
    }
    
    public static sortCurrencies<ThrowOnError extends boolean = true>(options?: Options<SortCurrenciesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<SortCurrenciesResponses, SortCurrenciesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/currencies/sort',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class Customer {
    public static getCustomerByReferenceOrEmail<ThrowOnError extends boolean = true>(options: Options<GetCustomerByReferenceOrEmailData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetCustomerByReferenceOrEmailResponses, GetCustomerByReferenceOrEmailErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/customers/{customerReferenceOrEmail}',
            ...options
        });
    }
    
    public static getCustomerOrderHistoryByReferenceOrEmail<ThrowOnError extends boolean = true>(options: Options<GetCustomerOrderHistoryByReferenceOrEmailData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetCustomerOrderHistoryByReferenceOrEmailResponses, GetCustomerOrderHistoryByReferenceOrEmailErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/customers/{customerReferenceOrEmail}/orders',
            ...options
        });
    }
}

export class Dictionary {
    public static createDictionaryItem<ThrowOnError extends boolean = true>(options?: Options<CreateDictionaryItemData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateDictionaryItemResponses, CreateDictionaryItemErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/dictionary-items',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static updateDictionaryItemById<ThrowOnError extends boolean = true>(options: Options<UpdateDictionaryItemByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<UpdateDictionaryItemByIdResponses, UpdateDictionaryItemByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/dictionary-items/{dictionaryItemId}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getDictionaryItemByKey<ThrowOnError extends boolean = true>(options: Options<GetDictionaryItemByKeyData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDictionaryItemByKeyResponses, GetDictionaryItemByKeyErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/dictionary-items/{dictionaryItemKey}',
            ...options
        });
    }
}

export class DiscountProvider {
    public static getDiscountRewardProviders<ThrowOnError extends boolean = true>(options?: Options<GetDiscountRewardProvidersData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDiscountRewardProvidersResponses, GetDiscountRewardProvidersErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/discount-reward-providers',
            ...options
        });
    }
    
    public static getDiscountRuleProviders<ThrowOnError extends boolean = true>(options?: Options<GetDiscountRuleProvidersData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDiscountRuleProvidersResponses, GetDiscountRuleProvidersErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/discount-rule-providers',
            ...options
        });
    }
}

export class Discount {
    public static getDiscounts<ThrowOnError extends boolean = true>(options?: Options<GetDiscountsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDiscountsResponses, GetDiscountsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/discounts',
            ...options
        });
    }
    
    public static createDiscount<ThrowOnError extends boolean = true>(options?: Options<CreateDiscountData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateDiscountResponses, CreateDiscountErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/discounts',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteDiscountByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<DeleteDiscountByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteDiscountByIdOrAliasResponses, DeleteDiscountByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/discounts/{discountIdOrAlias}',
            ...options
        });
    }
    
    public static getDiscountByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<GetDiscountByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetDiscountByIdOrAliasResponses, GetDiscountByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/discounts/{discountIdOrAlias}',
            ...options
        });
    }
    
    public static updateDiscountByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<UpdateDiscountByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<UpdateDiscountByIdOrAliasResponses, UpdateDiscountByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/discounts/{discountIdOrAlias}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static createDiscountScaffold<ThrowOnError extends boolean = true>(options?: Options<CreateDiscountScaffoldData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateDiscountScaffoldResponses, CreateDiscountScaffoldErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/discounts/scaffold',
            ...options
        });
    }
    
    public static sortDiscounts<ThrowOnError extends boolean = true>(options?: Options<SortDiscountsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<SortDiscountsResponses, SortDiscountsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/discounts/sort',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class EmailTemplate {
    public static getEmailTemplates<ThrowOnError extends boolean = true>(options?: Options<GetEmailTemplatesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetEmailTemplatesResponses, GetEmailTemplatesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/email-templates',
            ...options
        });
    }
    
    public static createEmailTemplate<ThrowOnError extends boolean = true>(options?: Options<CreateEmailTemplateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateEmailTemplateResponses, CreateEmailTemplateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/email-templates',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteEmailTemplateByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<DeleteEmailTemplateByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteEmailTemplateByIdOrAliasResponses, DeleteEmailTemplateByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/email-templates/{emailTemplateIdOrAlias}',
            ...options
        });
    }
    
    public static getEmailTemplateByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<GetEmailTemplateByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetEmailTemplateByIdOrAliasResponses, GetEmailTemplateByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/email-templates/{emailTemplateIdOrAlias}',
            ...options
        });
    }
    
    public static updateEmailTemplateByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<UpdateEmailTemplateByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<UpdateEmailTemplateByIdOrAliasResponses, UpdateEmailTemplateByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/email-templates/{emailTemplateIdOrAlias}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static sendEmailTemplateByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<SendEmailTemplateByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<SendEmailTemplateByIdOrAliasResponses, SendEmailTemplateByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/email-templates/{emailTemplateIdOrAlias}/send',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static createEmailTemplateScaffold<ThrowOnError extends boolean = true>(options?: Options<CreateEmailTemplateScaffoldData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateEmailTemplateScaffoldResponses, CreateEmailTemplateScaffoldErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/email-templates/scaffold',
            ...options
        });
    }
    
    public static sortEmailTemplates<ThrowOnError extends boolean = true>(options?: Options<SortEmailTemplatesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<SortEmailTemplatesResponses, SortEmailTemplatesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/email-templates/sort',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class ExportTemplate {
    public static getExportTemplates<ThrowOnError extends boolean = true>(options?: Options<GetExportTemplatesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetExportTemplatesResponses, GetExportTemplatesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/export-templates',
            ...options
        });
    }
    
    public static createExportTemplate<ThrowOnError extends boolean = true>(options?: Options<CreateExportTemplateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateExportTemplateResponses, CreateExportTemplateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/export-templates',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteExportTemplateByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<DeleteExportTemplateByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteExportTemplateByIdOrAliasResponses, DeleteExportTemplateByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/export-templates/{exportTemplateIdOrAlias}',
            ...options
        });
    }
    
    public static getExportTemplateByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<GetExportTemplateByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetExportTemplateByIdOrAliasResponses, GetExportTemplateByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/export-templates/{exportTemplateIdOrAlias}',
            ...options
        });
    }
    
    public static updateExportTemplateByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<UpdateExportTemplateByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<UpdateExportTemplateByIdOrAliasResponses, UpdateExportTemplateByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/export-templates/{exportTemplateIdOrAlias}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static export<ThrowOnError extends boolean = true>(options?: Options<ExportData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<ExportResponses, ExportErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/export-templates/export',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static createExportTemplateScaffold<ThrowOnError extends boolean = true>(options?: Options<CreateExportTemplateScaffoldData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateExportTemplateScaffoldResponses, CreateExportTemplateScaffoldErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/export-templates/scaffold',
            ...options
        });
    }
    
    public static sortExportTemplates<ThrowOnError extends boolean = true>(options?: Options<SortExportTemplatesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<SortExportTemplatesResponses, SortExportTemplatesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/export-templates/sort',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class GiftCard {
    public static getGiftCards<ThrowOnError extends boolean = true>(options?: Options<GetGiftCardsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetGiftCardsResponses, GetGiftCardsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/gift-cards',
            ...options
        });
    }
    
    public static createGiftCard<ThrowOnError extends boolean = true>(options?: Options<CreateGiftCardData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateGiftCardResponses, CreateGiftCardErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/gift-cards',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteGiftCardByIdOrCode<ThrowOnError extends boolean = true>(options: Options<DeleteGiftCardByIdOrCodeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteGiftCardByIdOrCodeResponses, DeleteGiftCardByIdOrCodeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/gift-cards/{giftCardIdOrCode}',
            ...options
        });
    }
    
    public static getGiftCardByIdOrCode<ThrowOnError extends boolean = true>(options: Options<GetGiftCardByIdOrCodeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetGiftCardByIdOrCodeResponses, GetGiftCardByIdOrCodeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/gift-cards/{giftCardIdOrCode}',
            ...options
        });
    }
    
    public static updateGiftCardByIdOrCode<ThrowOnError extends boolean = true>(options: Options<UpdateGiftCardByIdOrCodeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<UpdateGiftCardByIdOrCodeResponses, UpdateGiftCardByIdOrCodeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/gift-cards/{giftCardIdOrCode}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static generateGiftCardCode<ThrowOnError extends boolean = true>(options?: Options<GenerateGiftCardCodeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GenerateGiftCardCodeResponses, GenerateGiftCardCodeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/gift-cards/generate-code',
            ...options
        });
    }
    
    public static createGiftCardScaffold<ThrowOnError extends boolean = true>(options?: Options<CreateGiftCardScaffoldData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateGiftCardScaffoldResponses, CreateGiftCardScaffoldErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/gift-cards/scaffold',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class Location {
    public static getLocations<ThrowOnError extends boolean = true>(options?: Options<GetLocationsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetLocationsResponses, GetLocationsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/locations',
            ...options
        });
    }
    
    public static createLocation<ThrowOnError extends boolean = true>(options?: Options<CreateLocationData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateLocationResponses, CreateLocationErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/locations',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteLocationByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<DeleteLocationByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteLocationByIdOrAliasResponses, DeleteLocationByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/locations/{locationIdOrAlias}',
            ...options
        });
    }
    
    public static getLocationByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<GetLocationByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetLocationByIdOrAliasResponses, GetLocationByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/locations/{locationIdOrAlias}',
            ...options
        });
    }
    
    public static updateLocationByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<UpdateLocationByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<UpdateLocationByIdOrAliasResponses, UpdateLocationByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/locations/{locationIdOrAlias}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static createLocationScaffold<ThrowOnError extends boolean = true>(options?: Options<CreateLocationScaffoldData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateLocationScaffoldResponses, CreateLocationScaffoldErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/locations/scaffold',
            ...options
        });
    }
    
    public static sortLocations<ThrowOnError extends boolean = true>(options?: Options<SortLocationsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<SortLocationsResponses, SortLocationsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/locations/sort',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class OrderStatus {
    public static getOrderStatuses<ThrowOnError extends boolean = true>(options?: Options<GetOrderStatusesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetOrderStatusesResponses, GetOrderStatusesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/order-statuses',
            ...options
        });
    }
    
    public static createOrderStatus<ThrowOnError extends boolean = true>(options?: Options<CreateOrderStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateOrderStatusResponses, CreateOrderStatusErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/order-statuses',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteOrderStatusByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<DeleteOrderStatusByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteOrderStatusByIdOrAliasResponses, DeleteOrderStatusByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/order-statuses/{orderStatusIdOrAlias}',
            ...options
        });
    }
    
    public static getOrderStatusByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<GetOrderStatusByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetOrderStatusByIdOrAliasResponses, GetOrderStatusByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/order-statuses/{orderStatusIdOrAlias}',
            ...options
        });
    }
    
    public static updateOrderStatusByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<UpdateOrderStatusByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<UpdateOrderStatusByIdOrAliasResponses, UpdateOrderStatusByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/order-statuses/{orderStatusIdOrAlias}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static createOrderStatusScaffold<ThrowOnError extends boolean = true>(options?: Options<CreateOrderStatusScaffoldData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateOrderStatusScaffoldResponses, CreateOrderStatusScaffoldErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/order-statuses/scaffold',
            ...options
        });
    }
    
    public static sortOrderStatuses<ThrowOnError extends boolean = true>(options?: Options<SortOrderStatusesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<SortOrderStatusesResponses, SortOrderStatusesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/order-statuses/sort',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class Order {
    public static getOrders<ThrowOnError extends boolean = true>(options?: Options<GetOrdersData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetOrdersResponses, GetOrdersErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/orders',
            ...options
        });
    }
    
    public static deleteOrderById<ThrowOnError extends boolean = true>(options: Options<DeleteOrderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteOrderByIdResponses, DeleteOrderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/orders/{orderId}',
            ...options
        });
    }
    
    public static getOrderById<ThrowOnError extends boolean = true>(options: Options<GetOrderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetOrderByIdResponses, GetOrderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/orders/{orderId}',
            ...options
        });
    }
    
    public static updateOrderById<ThrowOnError extends boolean = true>(options: Options<UpdateOrderByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<UpdateOrderByIdResponses, UpdateOrderByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/orders/{orderId}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static cancelOrderPaymentById<ThrowOnError extends boolean = true>(options: Options<CancelOrderPaymentByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<CancelOrderPaymentByIdResponses, CancelOrderPaymentByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/orders/{orderId}/cancel-payment',
            ...options
        });
    }
    
    public static captureOrderPaymentById<ThrowOnError extends boolean = true>(options: Options<CaptureOrderPaymentByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<CaptureOrderPaymentByIdResponses, CaptureOrderPaymentByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/orders/{orderId}/capture-payment',
            ...options
        });
    }
    
    /**
     * @deprecated
     */
    public static refundOrderPaymentById<ThrowOnError extends boolean = true>(options: Options<RefundOrderPaymentByIdData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<RefundOrderPaymentByIdResponses, RefundOrderPaymentByIdErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/orders/{orderId}/refund-payment',
            ...options
        });
    }
    
    public static refundOrderPaymentByIdV2<ThrowOnError extends boolean = true>(options: Options<RefundOrderPaymentByIdV2Data, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<RefundOrderPaymentByIdV2Responses, RefundOrderPaymentByIdV2Errors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v2/orders/{orderId}/refund-payment',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getOrderAdvancedFilters<ThrowOnError extends boolean = true>(options?: Options<GetOrderAdvancedFiltersData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetOrderAdvancedFiltersResponses, GetOrderAdvancedFiltersErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/orders/advanced-filters',
            ...options
        });
    }
}

export class PaymentMethod {
    public static getPaymentMethods<ThrowOnError extends boolean = true>(options?: Options<GetPaymentMethodsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPaymentMethodsResponses, GetPaymentMethodsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/payment-methods',
            ...options
        });
    }
    
    public static createPaymentMethod<ThrowOnError extends boolean = true>(options?: Options<CreatePaymentMethodData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreatePaymentMethodResponses, CreatePaymentMethodErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/payment-methods',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deletePaymentMethodByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<DeletePaymentMethodByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeletePaymentMethodByIdOrAliasResponses, DeletePaymentMethodByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/payment-methods/{paymentMethodIdOrAlias}',
            ...options
        });
    }
    
    public static getPaymentMethodByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<GetPaymentMethodByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetPaymentMethodByIdOrAliasResponses, GetPaymentMethodByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/payment-methods/{paymentMethodIdOrAlias}',
            ...options
        });
    }
    
    public static updatePaymentMethodByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<UpdatePaymentMethodByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<UpdatePaymentMethodByIdOrAliasResponses, UpdatePaymentMethodByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/payment-methods/{paymentMethodIdOrAlias}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static createPaymentMethodScaffold<ThrowOnError extends boolean = true>(options?: Options<CreatePaymentMethodScaffoldData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreatePaymentMethodScaffoldResponses, CreatePaymentMethodScaffoldErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/payment-methods/scaffold',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static sortPaymentMethods<ThrowOnError extends boolean = true>(options?: Options<SortPaymentMethodsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<SortPaymentMethodsResponses, SortPaymentMethodsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/payment-methods/sort',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class PaymentProvider {
    public static getPaymentProviders<ThrowOnError extends boolean = true>(options?: Options<GetPaymentProvidersData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPaymentProvidersResponses, GetPaymentProvidersErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/payment-providers',
            ...options
        });
    }
    
    public static getPaymentProviderByAlias<ThrowOnError extends boolean = true>(options: Options<GetPaymentProviderByAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetPaymentProviderByAliasResponses, GetPaymentProviderByAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/payment-providers/{paymentProviderAlias}',
            ...options
        });
    }
}

export class PrintTemplate {
    public static getPrintTemplates<ThrowOnError extends boolean = true>(options?: Options<GetPrintTemplatesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPrintTemplatesResponses, GetPrintTemplatesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/print-templates',
            ...options
        });
    }
    
    public static createPrintTemplate<ThrowOnError extends boolean = true>(options?: Options<CreatePrintTemplateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreatePrintTemplateResponses, CreatePrintTemplateErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/print-templates',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deletePrintTemplateByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<DeletePrintTemplateByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeletePrintTemplateByIdOrAliasResponses, DeletePrintTemplateByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/print-templates/{printTemplateIdOrAlias}',
            ...options
        });
    }
    
    public static getPrintTemplateByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<GetPrintTemplateByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetPrintTemplateByIdOrAliasResponses, GetPrintTemplateByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/print-templates/{printTemplateIdOrAlias}',
            ...options
        });
    }
    
    public static updatePrintTemplateByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<UpdatePrintTemplateByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<UpdatePrintTemplateByIdOrAliasResponses, UpdatePrintTemplateByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/print-templates/{printTemplateIdOrAlias}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static render<ThrowOnError extends boolean = true>(options?: Options<RenderData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<RenderResponses, RenderErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/print-templates/render',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static createPrintTemplateScaffold<ThrowOnError extends boolean = true>(options?: Options<CreatePrintTemplateScaffoldData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreatePrintTemplateScaffoldResponses, CreatePrintTemplateScaffoldErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/print-templates/scaffold',
            ...options
        });
    }
    
    public static sortPrintTemplates<ThrowOnError extends boolean = true>(options?: Options<SortPrintTemplatesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<SortPrintTemplatesResponses, SortPrintTemplatesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/print-templates/sort',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class ProductAttributePreset {
    public static getProductAttributePresets<ThrowOnError extends boolean = true>(options?: Options<GetProductAttributePresetsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetProductAttributePresetsResponses, GetProductAttributePresetsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/product-attribute-presets',
            ...options
        });
    }
    
    public static createProductAttributePreset<ThrowOnError extends boolean = true>(options?: Options<CreateProductAttributePresetData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateProductAttributePresetResponses, CreateProductAttributePresetErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/product-attribute-presets',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteProductAttributePresetByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<DeleteProductAttributePresetByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteProductAttributePresetByIdOrAliasResponses, DeleteProductAttributePresetByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/product-attribute-presets/{productAttributePresetIdOrAlias}',
            ...options
        });
    }
    
    public static getProductAttributePresetByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<GetProductAttributePresetByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetProductAttributePresetByIdOrAliasResponses, GetProductAttributePresetByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/product-attribute-presets/{productAttributePresetIdOrAlias}',
            ...options
        });
    }
    
    public static updateProductAttributePresetByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<UpdateProductAttributePresetByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<UpdateProductAttributePresetByIdOrAliasResponses, UpdateProductAttributePresetByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/product-attribute-presets/{productAttributePresetIdOrAlias}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static createProductAttributePresetScaffold<ThrowOnError extends boolean = true>(options?: Options<CreateProductAttributePresetScaffoldData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateProductAttributePresetScaffoldResponses, CreateProductAttributePresetScaffoldErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/product-attribute-presets/scaffold',
            ...options
        });
    }
    
    public static sortProductAttributePresets<ThrowOnError extends boolean = true>(options?: Options<SortProductAttributePresetsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<SortProductAttributePresetsResponses, SortProductAttributePresetsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/product-attribute-presets/sort',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class ProductAttribute {
    public static getProductAttributes<ThrowOnError extends boolean = true>(options?: Options<GetProductAttributesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetProductAttributesResponses, GetProductAttributesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/product-attributes',
            ...options
        });
    }
    
    public static createProductAttribute<ThrowOnError extends boolean = true>(options?: Options<CreateProductAttributeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateProductAttributeResponses, CreateProductAttributeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/product-attributes',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteProductAttributeByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<DeleteProductAttributeByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteProductAttributeByIdOrAliasResponses, DeleteProductAttributeByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/product-attributes/{productAttributeIdOrAlias}',
            ...options
        });
    }
    
    public static getProductAttributeByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<GetProductAttributeByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetProductAttributeByIdOrAliasResponses, GetProductAttributeByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/product-attributes/{productAttributeIdOrAlias}',
            ...options
        });
    }
    
    public static updateProductAttributeByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<UpdateProductAttributeByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<UpdateProductAttributeByIdOrAliasResponses, UpdateProductAttributeByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/product-attributes/{productAttributeIdOrAlias}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static createProductAttributeScaffold<ThrowOnError extends boolean = true>(options?: Options<CreateProductAttributeScaffoldData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateProductAttributeScaffoldResponses, CreateProductAttributeScaffoldErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/product-attributes/scaffold',
            ...options
        });
    }
    
    public static sortProductAttributes<ThrowOnError extends boolean = true>(options?: Options<SortProductAttributesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<SortProductAttributesResponses, SortProductAttributesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/product-attributes/sort',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class Product {
    public static getProductByReference<ThrowOnError extends boolean = true>(options: Options<GetProductByReferenceData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetProductByReferenceResponses, GetProductByReferenceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/products/{productReference}',
            ...options
        });
    }
    
    public static updateProductByReference<ThrowOnError extends boolean = true>(options: Options<UpdateProductByReferenceData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<UpdateProductByReferenceResponses, UpdateProductByReferenceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/products/{productReference}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getProductVariantAttributes<ThrowOnError extends boolean = true>(options: Options<GetProductVariantAttributesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetProductVariantAttributesResponses, GetProductVariantAttributesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/products/{productReference}/attributes',
            ...options
        });
    }
    
    public static getProductVariantByReference<ThrowOnError extends boolean = true>(options: Options<GetProductVariantByReferenceData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetProductVariantByReferenceResponses, GetProductVariantByReferenceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/products/{productReference}/variants/{productVariantReference}',
            ...options
        });
    }
    
    public static updateProductVariantByReference<ThrowOnError extends boolean = true>(options: Options<UpdateProductVariantByReferenceData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).patch<UpdateProductVariantByReferenceResponses, UpdateProductVariantByReferenceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/products/{productReference}/variants/{productVariantReference}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getProductVariantStockByReference<ThrowOnError extends boolean = true>(options: Options<GetProductVariantStockByReferenceData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetProductVariantStockByReferenceResponses, GetProductVariantStockByReferenceErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/products/stock',
            ...options
        });
    }
    
    public static getProductSummaries<ThrowOnError extends boolean = true>(options?: Options<GetProductSummariesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetProductSummariesResponses, GetProductSummariesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/products/summaries',
            ...options
        });
    }
    
    public static getProductVariantSummaries<ThrowOnError extends boolean = true>(options: Options<GetProductVariantSummariesData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetProductVariantSummariesResponses, GetProductVariantSummariesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/products/summaries/{productReference}/variants',
            ...options
        });
    }
}

export class SalesTaxProvider {
    public static getSalesTaxProviders<ThrowOnError extends boolean = true>(options?: Options<GetSalesTaxProvidersData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetSalesTaxProvidersResponses, GetSalesTaxProvidersErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/sales-tax-providers',
            ...options
        });
    }
    
    public static getSalesTaxProviderByAlias<ThrowOnError extends boolean = true>(options: Options<GetSalesTaxProviderByAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetSalesTaxProviderByAliasResponses, GetSalesTaxProviderByAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/sales-tax-providers/{salesTaxProviderAlias}',
            ...options
        });
    }
}

export class Session {
    public static getSession<ThrowOnError extends boolean = true>(options?: Options<GetSessionData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetSessionResponses, GetSessionErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/session',
            ...options
        });
    }
}

export class ShippingMethod {
    public static getShippingMethods<ThrowOnError extends boolean = true>(options?: Options<GetShippingMethodsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetShippingMethodsResponses, GetShippingMethodsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/shipping-methods',
            ...options
        });
    }
    
    public static createShippingMethod<ThrowOnError extends boolean = true>(options?: Options<CreateShippingMethodData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateShippingMethodResponses, CreateShippingMethodErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/shipping-methods',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteShippingMethodByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<DeleteShippingMethodByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteShippingMethodByIdOrAliasResponses, DeleteShippingMethodByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/shipping-methods/{shippingMethodIdOrAlias}',
            ...options
        });
    }
    
    public static getShippingMethodByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<GetShippingMethodByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetShippingMethodByIdOrAliasResponses, GetShippingMethodByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/shipping-methods/{shippingMethodIdOrAlias}',
            ...options
        });
    }
    
    public static updateShippingMethodByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<UpdateShippingMethodByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<UpdateShippingMethodByIdOrAliasResponses, UpdateShippingMethodByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/shipping-methods/{shippingMethodIdOrAlias}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static createShippingMethodScaffold<ThrowOnError extends boolean = true>(options?: Options<CreateShippingMethodScaffoldData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateShippingMethodScaffoldResponses, CreateShippingMethodScaffoldErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/shipping-methods/scaffold',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static sortShippingMethods<ThrowOnError extends boolean = true>(options?: Options<SortShippingMethodsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<SortShippingMethodsResponses, SortShippingMethodsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/shipping-methods/sort',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class ShippingProvider {
    public static getShippingProviders<ThrowOnError extends boolean = true>(options?: Options<GetShippingProvidersData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetShippingProvidersResponses, GetShippingProvidersErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/shipping-providers',
            ...options
        });
    }
    
    public static getShippingProviderByAlias<ThrowOnError extends boolean = true>(options: Options<GetShippingProviderByAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetShippingProviderByAliasResponses, GetShippingProviderByAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/shipping-providers/{shippingProviderAlias}',
            ...options
        });
    }
}

export class ShippingRateProvider {
    public static getShippingRateProviders<ThrowOnError extends boolean = true>(options?: Options<GetShippingRateProvidersData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetShippingRateProvidersResponses, GetShippingRateProvidersErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/shipping-rate-providers',
            ...options
        });
    }
    
    public static getShippingRateRangeProviders<ThrowOnError extends boolean = true>(options?: Options<GetShippingRateRangeProvidersData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetShippingRateRangeProvidersResponses, GetShippingRateRangeProvidersErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/shipping-rate-range-providers',
            ...options
        });
    }
}

export class Store {
    public static getStores<ThrowOnError extends boolean = true>(options?: Options<GetStoresData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetStoresResponses, GetStoresErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/stores',
            ...options
        });
    }
    
    public static createStore<ThrowOnError extends boolean = true>(options?: Options<CreateStoreData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateStoreResponses, CreateStoreErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/stores',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteStoreByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<DeleteStoreByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteStoreByIdOrAliasResponses, DeleteStoreByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/stores/{storeIdOrAlias}',
            ...options
        });
    }
    
    public static getStoreByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<GetStoreByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetStoreByIdOrAliasResponses, GetStoreByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/stores/{storeIdOrAlias}',
            ...options
        });
    }
    
    public static updateStoreByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<UpdateStoreByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<UpdateStoreByIdOrAliasResponses, UpdateStoreByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/stores/{storeIdOrAlias}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static getStoreStatsByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<GetStoreStatsByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).post<GetStoreStatsByIdOrAliasResponses, GetStoreStatsByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/stores/{storeIdOrAlias}/stats',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static sortStores<ThrowOnError extends boolean = true>(options?: Options<SortStoresData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<SortStoresResponses, SortStoresErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/stores/sort',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class TaxCalculationMethod {
    public static getTaxCalculationMethods<ThrowOnError extends boolean = true>(options?: Options<GetTaxCalculationMethodsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTaxCalculationMethodsResponses, GetTaxCalculationMethodsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/tax-calculation-methods',
            ...options
        });
    }
    
    public static createTaxCalculationMethod<ThrowOnError extends boolean = true>(options?: Options<CreateTaxCalculationMethodData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateTaxCalculationMethodResponses, CreateTaxCalculationMethodErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/tax-calculation-methods',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteTaxCalculationMethodByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<DeleteTaxCalculationMethodByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteTaxCalculationMethodByIdOrAliasResponses, DeleteTaxCalculationMethodByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/tax-calculation-methods/{taxCalculationMethodIdOrAlias}',
            ...options
        });
    }
    
    public static getTaxCalculationMethodByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<GetTaxCalculationMethodByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetTaxCalculationMethodByIdOrAliasResponses, GetTaxCalculationMethodByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/tax-calculation-methods/{taxCalculationMethodIdOrAlias}',
            ...options
        });
    }
    
    public static updateTaxCalculationMethodByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<UpdateTaxCalculationMethodByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<UpdateTaxCalculationMethodByIdOrAliasResponses, UpdateTaxCalculationMethodByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/tax-calculation-methods/{taxCalculationMethodIdOrAlias}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static createTaxCalculationMethodScaffold<ThrowOnError extends boolean = true>(options?: Options<CreateTaxCalculationMethodScaffoldData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateTaxCalculationMethodScaffoldResponses, CreateTaxCalculationMethodScaffoldErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/tax-calculation-methods/scaffold',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static sortTaxCalculationMethods<ThrowOnError extends boolean = true>(options?: Options<SortTaxCalculationMethodsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<SortTaxCalculationMethodsResponses, SortTaxCalculationMethodsErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/tax-calculation-methods/sort',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class TaxClass {
    public static getTaxClasses<ThrowOnError extends boolean = true>(options?: Options<GetTaxClassesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTaxClassesResponses, GetTaxClassesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/tax-classes',
            ...options
        });
    }
    
    public static createTaxClass<ThrowOnError extends boolean = true>(options?: Options<CreateTaxClassData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateTaxClassResponses, CreateTaxClassErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/tax-classes',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static deleteTaxClassByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<DeleteTaxClassByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<DeleteTaxClassByIdOrAliasResponses, DeleteTaxClassByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/tax-classes/{taxClassIdOrAlias}',
            ...options
        });
    }
    
    public static getTaxClassByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<GetTaxClassByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetTaxClassByIdOrAliasResponses, GetTaxClassByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/tax-classes/{taxClassIdOrAlias}',
            ...options
        });
    }
    
    public static updateTaxClassByIdOrAlias<ThrowOnError extends boolean = true>(options: Options<UpdateTaxClassByIdOrAliasData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).put<UpdateTaxClassByIdOrAliasResponses, UpdateTaxClassByIdOrAliasErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/tax-classes/{taxClassIdOrAlias}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers
            }
        });
    }
    
    public static createTaxClassScaffold<ThrowOnError extends boolean = true>(options?: Options<CreateTaxClassScaffoldData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<CreateTaxClassScaffoldResponses, CreateTaxClassScaffoldErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/tax-classes/scaffold',
            ...options
        });
    }
    
    public static sortTaxClasses<ThrowOnError extends boolean = true>(options?: Options<SortTaxClassesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).put<SortTaxClassesResponses, SortTaxClassesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/tax-classes/sort',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
}

export class Utility {
    public static getCultures<ThrowOnError extends boolean = true>(options?: Options<GetCulturesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetCulturesResponses, GetCulturesErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/cultures',
            ...options
        });
    }
    
    public static getEnumOptionsByType<ThrowOnError extends boolean = true>(options: Options<GetEnumOptionsByTypeData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<GetEnumOptionsByTypeResponses, GetEnumOptionsByTypeErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/enum/{type}',
            ...options
        });
    }
    
    public static getExchangeRateServiceProvider<ThrowOnError extends boolean = true>(options?: Options<GetExchangeRateServiceProviderData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetExchangeRateServiceProviderResponses, GetExchangeRateServiceProviderErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/exchange-rates/provider',
            ...options
        });
    }
    
    public static getLicensingStatus<ThrowOnError extends boolean = true>(options?: Options<GetLicensingStatusData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetLicensingStatusResponses, GetLicensingStatusErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/licensing/status',
            ...options
        });
    }
    
    public static getMediaFromUrl<ThrowOnError extends boolean = true>(options?: Options<GetMediaFromUrlData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetMediaFromUrlResponses, GetMediaFromUrlErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/commerce/management/api/v1/util/GetMediaFromUrl',
            ...options
        });
    }
}