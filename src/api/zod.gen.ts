// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zActivityLogEntryDto = z.object({
    storeId: z.optional(z.union([
        z.uuid(),
        z.null()
    ])),
    entityId: z.optional(z.union([
        z.uuid(),
        z.null()
    ])),
    entityType: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    eventType: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    eventData: z.optional(z.union([
        z.array(z.string()),
        z.null()
    ])),
    eventDateUtc: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ]))
});

export const zCurrencyReferenceDto = z.object({
    id: z.uuid(),
    code: z.string()
});

export const zFormattedAmountDto = z.object({
    value: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zAmountDto = z.object({
    currency: z.optional(z.union([
        zCurrencyReferenceDto,
        z.null()
    ])),
    value: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    formatted: z.optional(z.union([
        zFormattedAmountDto,
        z.null()
    ]))
});

export const zAmountAdjustmentDto = z.object({
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    type: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    amount: z.optional(z.union([
        zAmountDto,
        z.null()
    ])),
    originalAmount: z.optional(z.union([
        zAmountDto,
        z.null()
    ])),
    metaData: z.optional(z.union([
        z.object({}),
        z.null()
    ]))
});

export const zAdjustedAmountDto = z.object({
    adjustments: z.optional(z.union([
        z.array(zAmountAdjustmentDto),
        z.null()
    ])),
    withoutAdjustments: z.optional(z.union([
        zAmountDto,
        z.null()
    ])),
    adjustment: z.optional(z.union([
        zAmountDto,
        z.null()
    ])),
    value: z.optional(z.union([
        zAmountDto,
        z.null()
    ]))
});

export const zFormattedPriceDto = z.object({
    withoutTax: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    tax: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    withTax: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zPriceDto = z.object({
    currency: z.optional(z.union([
        zCurrencyReferenceDto,
        z.null()
    ])),
    withoutTax: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    tax: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    withTax: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    formatted: z.optional(z.union([
        zFormattedPriceDto,
        z.null()
    ]))
});

export const zPriceAdjustmentDto = z.object({
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    type: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    price: z.optional(z.union([
        zPriceDto,
        z.null()
    ])),
    originalPrice: z.optional(z.union([
        zPriceDto,
        z.null()
    ])),
    metaData: z.optional(z.union([
        z.object({}),
        z.null()
    ]))
});

export const zAdjustedPriceDto = z.object({
    adjustments: z.optional(z.union([
        z.array(zPriceAdjustmentDto),
        z.null()
    ])),
    withoutAdjustments: z.optional(z.union([
        zPriceDto,
        z.null()
    ])),
    adjustment: z.optional(z.union([
        zPriceDto,
        z.null()
    ])),
    value: z.optional(z.union([
        zPriceDto,
        z.null()
    ]))
});

export const zAdjustedPriceWithPreviousAdjustmentsDto = z.object({
    adjustments: z.optional(z.union([
        z.array(zPriceAdjustmentDto),
        z.null()
    ])),
    withoutAdjustments: z.optional(z.union([
        zPriceDto,
        z.null()
    ])),
    adjustment: z.optional(z.union([
        zPriceDto,
        z.null()
    ])),
    value: z.optional(z.union([
        zPriceDto,
        z.null()
    ])),
    previousAdjustments: z.optional(z.union([
        zPriceDto,
        z.null()
    ])),
    withPreviousAdjustments: z.optional(z.union([
        zPriceDto,
        z.null()
    ])),
    totalAdjustment: z.optional(z.union([
        zPriceDto,
        z.null()
    ]))
});

export const zMeasurementSystem = z.enum([
    'Metric',
    'Imperial'
]);

export const zStoreBasicDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    measurementSystem: zMeasurementSystem,
    sortOrder: z.optional(z.union([
        z.int(),
        z.null()
    ]))
});

export const zStoreNamedReferenceDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zStoreReferenceDto = z.object({
    id: z.uuid(),
    alias: z.string()
});

export const zCurrencyDto = z.object({
    id: z.uuid(),
    code: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    store: z.optional(z.union([
        zStoreBasicDto,
        zStoreDto,
        zStoreNamedReferenceDto,
        zStoreReferenceDto,
        z.null()
    ])),
    culture: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    symbol: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    decimalPlaces: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    decimalSeparator: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    groupSeparator: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    formatTemplate: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    allowedCountries: z.optional(z.union([
        z.array(zAllowedCountryDto),
        z.null()
    ])),
    sortOrder: z.optional(z.union([
        z.int(),
        z.null()
    ]))
});

export const zCurrencyNamedReferenceDto = z.object({
    id: z.uuid(),
    code: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zLocationType = z.enum([
    'Commercial',
    'Residential'
]);

export const zLocationDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    store: z.optional(z.union([
        zStoreBasicDto,
        zStoreDto,
        zStoreNamedReferenceDto,
        zStoreReferenceDto,
        z.null()
    ])),
    addressLine1: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    addressLine2: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    city: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    region: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    countryIsoCode: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    zipCode: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    type: zLocationType,
    sortOrder: z.optional(z.union([
        z.int(),
        z.null()
    ]))
});

export const zLocationNamedReferenceDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zLocationReferenceDto = z.object({
    id: z.uuid(),
    alias: z.string()
});

export const zCountryNamedReferenceDto = z.object({
    id: z.uuid(),
    code: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zCountryReferenceDto = z.object({
    id: z.uuid(),
    code: z.string()
});

export const zTaxClassNamedReferenceDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zTaxClassReferenceDto = z.object({
    id: z.uuid(),
    alias: z.string()
});

export const zPaymentProviderFeaturesDto = z.object({
    fetchPaymentStatus: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    cancelPayment: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    capturePayment: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    refundPayment: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    partiallyRefundPayment: z.boolean()
});

export const zRegionNamedReferenceDto = z.object({
    id: z.uuid(),
    code: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zRegionReferenceDto = z.object({
    id: z.uuid(),
    code: z.string()
});

export const zAllowedCountryRegionDto = z.object({
    country: z.optional(z.union([
        zCountryDto,
        zCountryNamedReferenceDto,
        zCountryReferenceDto,
        z.null()
    ])),
    region: z.optional(z.union([
        zRegionDto,
        zRegionNamedReferenceDto,
        zRegionReferenceDto,
        z.null()
    ]))
});

export const zServicePriceDto = z.object({
    currency: z.optional(z.union([
        zCurrencyDto,
        zCurrencyNamedReferenceDto,
        zCurrencyReferenceDto,
        z.null()
    ])),
    country: z.optional(z.union([
        zCountryDto,
        zCountryNamedReferenceDto,
        zCountryReferenceDto,
        z.null()
    ])),
    region: z.optional(z.union([
        zRegionDto,
        zRegionNamedReferenceDto,
        zRegionReferenceDto,
        z.null()
    ])),
    value: z.optional(z.union([
        z.number(),
        z.null()
    ]))
});

export const zPaymentMethodDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    store: z.optional(z.union([
        zStoreBasicDto,
        zStoreDto,
        zStoreNamedReferenceDto,
        zStoreReferenceDto,
        z.null()
    ])),
    sku: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    taxClass: z.optional(z.union([
        zTaxClassDto,
        zTaxClassNamedReferenceDto,
        zTaxClassReferenceDto,
        z.null()
    ])),
    imageId: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    paymentProviderAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    paymentProviderSettings: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    enabledFeatures: z.optional(z.union([
        zPaymentProviderFeaturesDto,
        z.null()
    ])),
    allowedCountryRegions: z.optional(z.union([
        z.array(zAllowedCountryRegionDto),
        z.null()
    ])),
    prices: z.optional(z.union([
        z.array(zServicePriceDto),
        z.null()
    ])),
    sortOrder: z.optional(z.union([
        z.int(),
        z.null()
    ]))
});

export const zPaymentMethodNamedReferenceDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zPaymentMethodReferenceDto = z.object({
    id: z.uuid(),
    alias: z.string()
});

export const zPaymentMethodWithFeeDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    store: z.optional(z.union([
        zStoreBasicDto,
        zStoreDto,
        zStoreNamedReferenceDto,
        zStoreReferenceDto,
        z.null()
    ])),
    sku: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    taxClass: z.optional(z.union([
        zTaxClassDto,
        zTaxClassNamedReferenceDto,
        zTaxClassReferenceDto,
        z.null()
    ])),
    imageId: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    paymentProviderAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    paymentProviderSettings: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    enabledFeatures: z.optional(z.union([
        zPaymentProviderFeaturesDto,
        z.null()
    ])),
    allowedCountryRegions: z.optional(z.union([
        z.array(zAllowedCountryRegionDto),
        z.null()
    ])),
    prices: z.optional(z.union([
        z.array(zServicePriceDto),
        z.null()
    ])),
    sortOrder: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    fee: z.optional(z.union([
        zPriceDto,
        z.null()
    ]))
});

export const zShippingCalculationMode = z.enum([
    'Fixed',
    'Dynamic',
    'Realtime'
]);

export const zDynamicShippingRateValueDto = z.object({
    rateProviderAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    value: z.optional(z.unknown())
});

export const zDynamicShippingRateDto = z.object({
    from: z.optional(z.unknown()),
    to: z.optional(z.unknown()),
    values: z.optional(z.union([
        z.array(zDynamicShippingRateValueDto),
        z.null()
    ]))
});

export const zDynamicRateShippingCalculationConfigDto = z.object({
    rangeProviderAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    rates: z.optional(z.union([
        z.array(zDynamicShippingRateDto),
        z.null()
    ]))
});

export const zDynamicRateShippingCalculationConfigRequestDto = z.object({
    rangeProviderAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    rates: z.optional(z.union([
        z.array(zDynamicShippingRateDto),
        z.null()
    ]))
});

export const zFixedRateShippingCalculationConfigDto = z.object({
    prices: z.optional(z.union([
        z.array(zServicePriceDto),
        z.null()
    ]))
});

export const zRealtimeRateShippingCalculationConfigDto = z.object({
    fixedPriceSurcharge: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    percentageSurcharge: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    rateCacheDuration: z.optional(z.union([
        z.int(),
        z.null()
    ]))
});

export const zRealtimeRateShippingCalculationConfigRequestDto = z.object({
    fixedPriceSurcharge: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    percentageSurcharge: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    rateCacheDuration: z.optional(z.union([
        z.int(),
        z.null()
    ]))
});

export const zShippingMethodDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    store: z.optional(z.union([
        zStoreBasicDto,
        zStoreDto,
        zStoreNamedReferenceDto,
        zStoreReferenceDto,
        z.null()
    ])),
    sku: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    taxClass: z.optional(z.union([
        zTaxClassDto,
        zTaxClassNamedReferenceDto,
        zTaxClassReferenceDto,
        z.null()
    ])),
    imageId: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    shippingProviderAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    calculationMode: zShippingCalculationMode,
    calculationConfig: z.optional(z.union([
        zDynamicRateShippingCalculationConfigDto,
        zDynamicRateShippingCalculationConfigRequestDto,
        zFixedRateShippingCalculationConfigDto,
        zRealtimeRateShippingCalculationConfigDto,
        zRealtimeRateShippingCalculationConfigRequestDto,
        z.null()
    ])),
    shippingProviderSettings: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    allowedCountryRegions: z.optional(z.union([
        z.array(zAllowedCountryRegionDto),
        z.null()
    ])),
    sortOrder: z.optional(z.union([
        z.int(),
        z.null()
    ]))
});

export const zShippingMethodNamedReferenceDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zShippingMethodReferenceDto = z.object({
    id: z.uuid(),
    alias: z.string()
});

export const zShippingOptionDto = z.object({
    id: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zShippingRateDto = z.object({
    option: z.optional(z.union([
        zShippingOptionDto,
        z.null()
    ])),
    packageId: z.optional(z.union([
        z.uuid(),
        z.null()
    ])),
    value: z.optional(z.union([
        zPriceDto,
        z.null()
    ]))
});

export const zShippingMethodWithRatesDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    store: z.optional(z.union([
        zStoreBasicDto,
        zStoreDto,
        zStoreNamedReferenceDto,
        zStoreReferenceDto,
        z.null()
    ])),
    sku: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    taxClass: z.optional(z.union([
        zTaxClassDto,
        zTaxClassNamedReferenceDto,
        zTaxClassReferenceDto,
        z.null()
    ])),
    imageId: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    shippingProviderAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    calculationMode: zShippingCalculationMode,
    calculationConfig: z.optional(z.union([
        zDynamicRateShippingCalculationConfigDto,
        zDynamicRateShippingCalculationConfigRequestDto,
        zFixedRateShippingCalculationConfigDto,
        zRealtimeRateShippingCalculationConfigDto,
        zRealtimeRateShippingCalculationConfigRequestDto,
        z.null()
    ])),
    shippingProviderSettings: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    allowedCountryRegions: z.optional(z.union([
        z.array(zAllowedCountryRegionDto),
        z.null()
    ])),
    sortOrder: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    rates: z.optional(z.union([
        z.array(zShippingRateDto),
        z.null()
    ]))
});

export const zRegionDto = z.object({
    id: z.uuid(),
    code: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    store: z.optional(z.union([
        zStoreBasicDto,
        zStoreDto,
        zStoreNamedReferenceDto,
        zStoreReferenceDto,
        z.null()
    ])),
    country: z.optional(z.union([
        zCountryDto,
        zCountryNamedReferenceDto,
        zCountryReferenceDto,
        z.null()
    ])),
    defaultPaymentMethod: z.optional(z.union([
        zPaymentMethodDto,
        zPaymentMethodNamedReferenceDto,
        zPaymentMethodReferenceDto,
        zPaymentMethodWithFeeDto,
        z.null()
    ])),
    defaultShippingMethod: z.optional(z.union([
        zShippingMethodDto,
        zShippingMethodNamedReferenceDto,
        zShippingMethodReferenceDto,
        zShippingMethodWithRatesDto,
        z.null()
    ])),
    sortOrder: z.optional(z.union([
        z.int(),
        z.null()
    ]))
});

export const zCountryRegionTaxClassDto = z.object({
    country: z.optional(z.union([
        zCountryDto,
        zCountryNamedReferenceDto,
        zCountryReferenceDto,
        z.null()
    ])),
    region: z.optional(z.union([
        zRegionDto,
        zRegionNamedReferenceDto,
        zRegionReferenceDto,
        z.null()
    ])),
    taxRate: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    taxCode: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zTaxClassDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    store: z.optional(z.union([
        zStoreBasicDto,
        zStoreDto,
        zStoreNamedReferenceDto,
        zStoreReferenceDto,
        z.null()
    ])),
    defaultTaxRate: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    defaultTaxCode: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    countryRegionTaxClasses: z.optional(z.union([
        z.array(zCountryRegionTaxClassDto),
        z.null()
    ])),
    sortOrder: z.optional(z.union([
        z.int(),
        z.null()
    ]))
});

export const zOrderStatusDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    store: z.optional(z.union([
        zStoreBasicDto,
        zStoreDto,
        zStoreNamedReferenceDto,
        zStoreReferenceDto,
        z.null()
    ])),
    color: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    sortOrder: z.optional(z.union([
        z.int(),
        z.null()
    ]))
});

export const zOrderStatusNamedReferenceDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zOrderStatusReferenceDto = z.object({
    id: z.uuid(),
    alias: z.string()
});

export const zTemplateCategory = z.enum([
    'Order',
    'GiftCard',
    'Discount',
    'Cart',
    'Custom'
]);

export const zEmailTemplateDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    store: z.optional(z.union([
        zStoreBasicDto,
        zStoreDto,
        zStoreNamedReferenceDto,
        zStoreReferenceDto,
        z.null()
    ])),
    category: zTemplateCategory,
    subject: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    senderName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    senderAddress: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    replyToAddresses: z.optional(z.union([
        z.array(z.string()),
        z.null()
    ])),
    toAddresses: z.optional(z.union([
        z.array(z.string()),
        z.null()
    ])),
    ccAddresses: z.optional(z.union([
        z.array(z.string()),
        z.null()
    ])),
    bccAddresses: z.optional(z.union([
        z.array(z.string()),
        z.null()
    ])),
    sendToCustomer: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    templateView: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    sortOrder: z.optional(z.union([
        z.int(),
        z.null()
    ]))
});

export const zEmailTemplateNamedReferenceDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zEmailTemplateReferenceDto = z.object({
    id: z.uuid(),
    alias: z.string()
});

export const zOrderRoundingMethod = z.enum([
    'Unit',
    'Line',
    'Total'
]);

export const zGiftCardActivationMethod = z.enum([
    'Manual',
    'Automatic',
    'OrderStatus'
]);

export const zStoreDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    measurementSystem: zMeasurementSystem,
    sortOrder: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    baseCurrency: z.optional(z.union([
        zCurrencyDto,
        zCurrencyNamedReferenceDto,
        zCurrencyReferenceDto,
        z.null()
    ])),
    defaultLocation: z.optional(z.union([
        zLocationDto,
        zLocationNamedReferenceDto,
        zLocationReferenceDto,
        z.null()
    ])),
    defaultCountry: z.optional(z.union([
        zCountryDto,
        zCountryNamedReferenceDto,
        zCountryReferenceDto,
        z.null()
    ])),
    defaultTaxClass: z.optional(z.union([
        zTaxClassDto,
        zTaxClassNamedReferenceDto,
        zTaxClassReferenceDto,
        z.null()
    ])),
    defaultOrderStatus: z.optional(z.union([
        zOrderStatusDto,
        zOrderStatusNamedReferenceDto,
        zOrderStatusReferenceDto,
        z.null()
    ])),
    errorOrderStatus: z.optional(z.union([
        zOrderStatusDto,
        zOrderStatusNamedReferenceDto,
        zOrderStatusReferenceDto,
        z.null()
    ])),
    pricesIncludeTax: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    canRefundTransactionFee: z.boolean(),
    useCookies: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    cookieTimeout: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    confirmationEmailTemplate: z.optional(z.union([
        zEmailTemplateDto,
        zEmailTemplateNamedReferenceDto,
        zEmailTemplateReferenceDto,
        z.null()
    ])),
    errorEmailTemplate: z.optional(z.union([
        zEmailTemplateDto,
        zEmailTemplateNamedReferenceDto,
        zEmailTemplateReferenceDto,
        z.null()
    ])),
    abandonedCartEmailTemplate: z.optional(z.union([
        zEmailTemplateDto,
        zEmailTemplateNamedReferenceDto,
        zEmailTemplateReferenceDto,
        z.null()
    ])),
    abandonedCartInactivityPeriod: z.int(),
    abandonedCartLandingPageUrl: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    cartNumberTemplate: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    orderNumberTemplate: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    orderRoundingMethod: zOrderRoundingMethod,
    productPropertyAliases: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    productUniquenessPropertyAliases: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    giftCardCodeLength: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    giftCardDaysValid: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    giftCardCodeTemplate: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    giftCardPropertyAliases: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    giftCardActivationMethod: zGiftCardActivationMethod,
    giftCardActivationOrderStatus: z.optional(z.union([
        zOrderStatusDto,
        zOrderStatusNamedReferenceDto,
        zOrderStatusReferenceDto,
        z.null()
    ])),
    defaultGiftCardEmailTemplate: z.optional(z.union([
        zEmailTemplateDto,
        zEmailTemplateNamedReferenceDto,
        zEmailTemplateReferenceDto,
        z.null()
    ])),
    allowedUsers: z.optional(z.union([
        z.array(z.string()),
        z.null()
    ])),
    allowedUserRoles: z.optional(z.union([
        z.array(z.string()),
        z.null()
    ])),
    logoImageUrl: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    themeColor: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zTaxCalculationMethodDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    store: z.optional(z.union([
        zStoreBasicDto,
        zStoreDto,
        zStoreNamedReferenceDto,
        zStoreReferenceDto,
        z.null()
    ])),
    salesTaxProviderAlias: z.string(),
    salesTaxProviderSettings: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    sortOrder: z.optional(z.union([
        z.int(),
        z.null()
    ]))
});

export const zTaxCalculationMethodNamedReferenceDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zTaxCalculationMethodReferenceDto = z.object({
    id: z.uuid(),
    alias: z.string()
});

export const zCountryDto = z.object({
    id: z.uuid(),
    code: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    store: z.optional(z.union([
        zStoreBasicDto,
        zStoreDto,
        zStoreNamedReferenceDto,
        zStoreReferenceDto,
        z.null()
    ])),
    taxCalculationMethod: z.optional(z.union([
        zTaxCalculationMethodDto,
        zTaxCalculationMethodNamedReferenceDto,
        zTaxCalculationMethodReferenceDto,
        z.null()
    ])),
    defaultCurrency: z.optional(z.union([
        zCurrencyDto,
        zCurrencyNamedReferenceDto,
        zCurrencyReferenceDto,
        z.null()
    ])),
    defaultPaymentMethod: z.optional(z.union([
        zPaymentMethodDto,
        zPaymentMethodNamedReferenceDto,
        zPaymentMethodReferenceDto,
        zPaymentMethodWithFeeDto,
        z.null()
    ])),
    defaultShippingMethod: z.optional(z.union([
        zShippingMethodDto,
        zShippingMethodNamedReferenceDto,
        zShippingMethodReferenceDto,
        zShippingMethodWithRatesDto,
        z.null()
    ])),
    regions: z.optional(z.union([
        z.array(z.union([
            zRegionDto,
            zRegionNamedReferenceDto,
            zRegionReferenceDto
        ])),
        z.null()
    ])),
    sortOrder: z.optional(z.union([
        z.int(),
        z.null()
    ]))
});

export const zAllowedCountryDto = z.object({
    country: z.optional(z.union([
        zCountryDto,
        zCountryNamedReferenceDto,
        zCountryReferenceDto,
        z.null()
    ]))
});

export const zAllowedCountryRegionRequestDto = z.object({
    country: z.string(),
    region: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zAllowedCountryRequestDto = z.object({
    country: z.string()
});

export const zChartDatasetInt64Dto = z.object({
    name: z.string(),
    labels: z.array(z.string()),
    data: z.array(z.coerce.bigint())
});

export const zFormattedValueDecimalDto = z.object({
    value: z.number(),
    valueFormatted: z.string()
});

export const zAnalyticsAbandonedCartConversionRatesDataDto = z.object({
    datasets: z.array(zChartDatasetInt64Dto),
    value: zFormattedValueDecimalDto,
    percentageChange: z.optional(z.union([
        zFormattedValueDecimalDto,
        z.null()
    ])),
    percentagePointChange: z.optional(z.union([
        zFormattedValueDecimalDto,
        z.null()
    ])),
    currentNotifiedCarts: z.coerce.bigint(),
    currentFinalizedCarts: z.coerce.bigint(),
    previousNotifiedCarts: z.optional(z.union([
        z.coerce.bigint().readonly(),
        z.null()
    ]).readonly()),
    previousFinalizedCarts: z.optional(z.union([
        z.coerce.bigint(),
        z.null()
    ])),
    currentConversionRate: zFormattedValueDecimalDto,
    previousConversionRate: z.optional(z.union([
        zFormattedValueDecimalDto,
        z.null()
    ]))
});

export const zChartDatasetDecimalDto = z.object({
    name: z.string(),
    labels: z.array(z.string()),
    data: z.array(z.number())
});

export const zAnalyticsAverageOrderValueDataDto = z.object({
    datasets: z.array(zChartDatasetDecimalDto),
    value: zFormattedValueDecimalDto,
    percentageChange: z.optional(z.union([
        zFormattedValueDecimalDto,
        z.null()
    ])),
    percentagePointChange: z.optional(z.union([
        zFormattedValueDecimalDto,
        z.null()
    ]))
});

export const zCartConversionRateDataDto = z.object({
    currentCarts: z.coerce.bigint(),
    currentPercentageOfTotalCarts: zFormattedValueDecimalDto,
    previousCarts: z.optional(z.union([
        z.coerce.bigint(),
        z.null()
    ])),
    previousPercentageOfTotalCarts: z.optional(z.union([
        zFormattedValueDecimalDto,
        z.null()
    ])),
    percentageChange: z.optional(z.union([
        zFormattedValueDecimalDto,
        z.null()
    ])),
    percentagePointChange: z.optional(z.union([
        zFormattedValueDecimalDto,
        z.null()
    ]))
});

export const zAnalyticsCartConversionRatesDataDto = z.object({
    datasets: z.array(zChartDatasetInt64Dto),
    value: zFormattedValueDecimalDto,
    percentageChange: z.optional(z.union([
        zFormattedValueDecimalDto,
        z.null()
    ])),
    percentagePointChange: z.optional(z.union([
        zFormattedValueDecimalDto,
        z.null()
    ])),
    currentTotalCarts: z.coerce.bigint(),
    previousTotalCarts: z.optional(z.union([
        z.coerce.bigint(),
        z.null()
    ])),
    totalCartsReachedCheckout: zCartConversionRateDataDto,
    totalCartsFinalized: zCartConversionRateDataDto,
    dateRangeExceedsCartCleanupPolicy: z.boolean()
});

export const zProductSalesDataDto = z.object({
    productReference: z.string(),
    productVariantReference: z.string(),
    sku: z.string(),
    name: z.string(),
    totalQuantity: z.number(),
    percentageChange: z.optional(z.union([
        zFormattedValueDecimalDto,
        z.null()
    ]))
});

export const zAnalyticsProductSalesDataDto = z.object({
    products: z.array(zProductSalesDataDto)
});

export const zAnalyticsRepeatCustomerRatesDataDto = z.object({
    datasets: z.array(zChartDatasetDecimalDto),
    value: zFormattedValueDecimalDto,
    percentageChange: z.optional(z.union([
        zFormattedValueDecimalDto,
        z.null()
    ])),
    percentagePointChange: z.optional(z.union([
        zFormattedValueDecimalDto,
        z.null()
    ]))
});

export const zFormattedValueInt64Dto = z.object({
    value: z.coerce.bigint(),
    valueFormatted: z.string()
});

export const zAnalyticsTotalOrdersDataDto = z.object({
    datasets: z.array(zChartDatasetInt64Dto),
    value: zFormattedValueInt64Dto,
    percentageChange: z.optional(z.union([
        zFormattedValueDecimalDto,
        z.null()
    ])),
    percentagePointChange: z.optional(z.union([
        zFormattedValueDecimalDto,
        z.null()
    ]))
});

export const zAnalyticsTotalRevenueDataDto = z.object({
    datasets: z.array(zChartDatasetDecimalDto),
    value: zFormattedValueDecimalDto,
    percentageChange: z.optional(z.union([
        zFormattedValueDecimalDto,
        z.null()
    ])),
    percentagePointChange: z.optional(z.union([
        zFormattedValueDecimalDto,
        z.null()
    ]))
});

export const zAnalyticsWidgetRequestDto = z.object({
    from: z.iso.datetime(),
    to: z.iso.datetime(),
    compareFrom: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    compareTo: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    localTimezoneOffset: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    localCulture: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zAttributeNameDto = z.object({
    alias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zAttributeValueDto = z.object({
    alias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zAttributeCombinationDto = z.object({
    name: z.optional(z.union([
        zAttributeNameDto,
        z.null()
    ])),
    value: z.optional(z.union([
        zAttributeValueDto,
        z.null()
    ]))
});

export const zAttributeDto = z.object({
    name: z.optional(z.union([
        zAttributeNameDto,
        z.null()
    ])),
    values: z.optional(z.union([
        z.array(zAttributeValueDto),
        z.null()
    ]))
});

export const zAutoCreateCountriesAndRegionsRequestDto = z.object({
    fallbackCurrency: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zCartPaymentLinkDto = z.object({
    paymentLink: z.string()
});

export const zContactDto = z.object({
    firstName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    lastName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    email: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    telephone: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zCountryRegionTaxClassRequestDto = z.object({
    country: z.string(),
    region: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    taxRate: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    taxCode: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zCreateCartRequestDto = z.object({
    languageIsoCode: z.string(),
    currency: z.string()
});

export const zCreateCountryRequestDto = z.object({
    code: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    taxCalculationMethod: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    defaultCurrency: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    defaultPaymentMethod: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    defaultShippingMethod: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zCreateCurrencyRequestDto = z.object({
    code: z.string(),
    name: z.string(),
    culture: z.string(),
    formatTemplate: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    allowedCountries: z.array(zAllowedCountryRequestDto)
});

export const zDictionaryItemTranslationDto = z.object({
    isoCode: z.string(),
    translation: z.string()
});

export const zCreateDictionaryItemRequestDto = z.object({
    name: z.string(),
    translations: z.array(zDictionaryItemTranslationDto)
});

export const zDiscountType = z.enum([
    'Automatic',
    'Code'
]);

export const zDiscountCodeDto = z.object({
    id: z.uuid(),
    code: z.string(),
    usageLimit: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    isUnlimited: z.optional(z.union([
        z.boolean(),
        z.null()
    ]))
});

export const zDiscountRuleConfigDto = z.object({
    ruleProviderAlias: z.string(),
    settings: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    children: z.optional(z.union([
        z.array(z.lazy((): any => {
            return zDiscountRuleConfigDto;
        })),
        z.null()
    ]))
});

export const zDiscountRewardConfigDto = z.object({
    rewardProviderAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    settings: z.optional(z.union([
        z.object({}),
        z.null()
    ]))
});

export const zCreateDiscountRequestDto = z.object({
    alias: z.string(),
    name: z.string(),
    type: zDiscountType,
    codes: z.optional(z.union([
        z.array(zDiscountCodeDto),
        z.null()
    ])),
    rules: z.optional(z.union([
        zDiscountRuleConfigDto,
        z.null()
    ])),
    rewards: z.optional(z.union([
        z.array(zDiscountRewardConfigDto),
        z.null()
    ])),
    blockFurtherDiscounts: z.boolean(),
    blockIfPreviousDiscounts: z.boolean(),
    startDate: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    expiryDate: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    isActive: z.boolean()
});

export const zCreateEmailTemplateRequestDto = z.object({
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    alias: z.string(),
    category: zTemplateCategory,
    subject: z.string(),
    senderName: z.string(),
    senderAddress: z.string(),
    replyToAddresses: z.optional(z.union([
        z.array(z.string()),
        z.null()
    ])),
    toAddresses: z.optional(z.union([
        z.array(z.string()),
        z.null()
    ])),
    ccAddresses: z.optional(z.union([
        z.array(z.string()),
        z.null()
    ])),
    bccAddresses: z.optional(z.union([
        z.array(z.string()),
        z.null()
    ])),
    sendToCustomer: z.boolean(),
    templateView: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zExportStrategy = z.enum([
    'SingleFile',
    'MultiFile'
]);

export const zCreateExportTemplateRequestDto = z.object({
    name: z.string(),
    alias: z.string(),
    category: zTemplateCategory,
    fileMimeType: z.string(),
    fileExtension: z.string(),
    exportStrategy: zExportStrategy,
    templateView: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zCreateGiftCardRequestDto = z.object({
    code: z.string(),
    currency: z.string(),
    originalAmount: z.number(),
    remainingAmount: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    expiryDate: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    isActive: z.boolean(),
    properties: z.optional(z.union([
        z.object({}),
        z.null()
    ]))
});

export const zCreateLocationRequestDto = z.object({
    alias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    addressLine1: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    addressLine2: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    city: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    region: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    countryIsoCode: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    zipCode: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    type: zLocationType
});

export const zCreateOrderStatusRequestDto = z.object({
    alias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    color: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zServicePriceRequestDto = z.object({
    currency: z.string(),
    country: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    region: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    value: z.number()
});

export const zCreatePaymentMethodRequestDto = z.object({
    alias: z.string(),
    name: z.string(),
    sku: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    taxClass: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    paymentProviderAlias: z.string(),
    paymentProviderSettings: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    enabledFeatures: z.optional(z.union([
        zPaymentProviderFeaturesDto,
        z.null()
    ])),
    allowedCountryRegions: z.optional(z.union([
        z.array(zAllowedCountryRegionRequestDto),
        z.null()
    ])),
    prices: z.optional(z.union([
        z.array(zServicePriceRequestDto),
        z.null()
    ]))
});

export const zCreatePrintTemplateRequestDto = z.object({
    alias: z.string(),
    name: z.string(),
    category: zTemplateCategory,
    templateView: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zCreateProductAttributePresetRequestDto = z.object({
    alias: z.string(),
    name: z.string(),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    icon: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    attributes: z.object({})
});

export const zTranslatedValueRequestDto = z.object({
    alias: z.string(),
    defaultValue: z.string(),
    values: z.optional(z.union([
        z.object({}),
        z.null()
    ]))
});

export const zCreateProductAttributeRequestDto = z.object({
    attribute: zTranslatedValueRequestDto,
    values: z.array(zTranslatedValueRequestDto)
});

export const zCreateRegionRequestDto = z.object({
    code: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    defaultPaymentMethod: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    defaultShippingMethod: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zFixedRateShippingCalculationConfigRequestDto = z.object({
    prices: z.array(zServicePriceRequestDto)
});

export const zCreateShippingMethodRequestDto = z.object({
    alias: z.string(),
    name: z.string(),
    sku: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    taxClass: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    imageId: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    shippingProviderAlias: z.string(),
    calculationMode: z.string(),
    shippingProviderSettings: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    allowedCountryRegions: z.optional(z.union([
        z.array(zAllowedCountryRegionRequestDto),
        z.null()
    ])),
    calculationConfig: z.optional(z.union([
        zDynamicRateShippingCalculationConfigRequestDto,
        zFixedRateShippingCalculationConfigRequestDto,
        zRealtimeRateShippingCalculationConfigRequestDto,
        z.null()
    ]))
});

export const zCreateStoreRequestDto = z.object({
    name: z.string(),
    alias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    autoPopulate: z.boolean()
});

export const zCreateTaxCalculationMethodRequestDto = z.object({
    alias: z.string(),
    name: z.string(),
    salesTaxProviderAlias: z.string(),
    salesTaxProviderSettings: z.optional(z.union([
        z.object({}),
        z.null()
    ]))
});

export const zCreateTaxClassRequestDto = z.object({
    alias: z.string(),
    name: z.string(),
    defaultTaxRate: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    defaultTaxCode: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    countryRegionTaxClasses: z.optional(z.union([
        z.array(zCountryRegionTaxClassRequestDto),
        z.null()
    ]))
});

export const zCultureDto = z.object({
    name: z.string(),
    code: z.string()
});

export const zPropertyDefinitionDto = z.object({
    alias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    label: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    viewUiAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    viewElementName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    viewConfig: z.optional(z.unknown()),
    editorAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    editorUiAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    editorElementName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    editorConfig: z.optional(z.unknown()),
    defaultValue: z.optional(z.unknown())
});

export const zPropertyValueDto = z.object({
    definition: z.optional(z.union([
        zPropertyDefinitionDto,
        z.null()
    ])),
    value: z.optional(z.unknown())
});

export const zCustomerDto = z.object({
    customerReference: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    isRegistered: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    isUmbracoMember: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    properties: z.optional(z.union([
        z.array(zPropertyValueDto),
        z.null()
    ]))
});

export const zDictionaryItemDto = z.object({
    id: z.uuid(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    translations: z.optional(z.union([
        z.array(zDictionaryItemTranslationDto),
        z.null()
    ]))
});

export const zDiscountStatus = z.enum([
    'Active',
    'Inactive',
    'Scheduled',
    'Expired'
]);

export const zDiscountDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    store: z.optional(z.union([
        zStoreBasicDto,
        zStoreDto,
        zStoreNamedReferenceDto,
        zStoreReferenceDto,
        z.null()
    ])),
    type: zDiscountType,
    codes: z.optional(z.union([
        z.array(zDiscountCodeDto),
        z.null()
    ])),
    rules: z.optional(z.union([
        zDiscountRuleConfigDto,
        z.null()
    ])),
    rewards: z.optional(z.union([
        z.array(zDiscountRewardConfigDto),
        z.null()
    ])),
    blockFurtherDiscounts: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    blockIfPreviousDiscounts: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    startDate: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    expiryDate: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    isActive: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    status: zDiscountStatus,
    sortOrder: z.optional(z.union([
        z.int(),
        z.null()
    ]))
});

export const zDiscountNamedReferenceDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zDiscountReferenceDto = z.object({
    id: z.uuid(),
    alias: z.string()
});

export const zDiscountRewardProviderDto = z.object({
    icon: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    alias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    label: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    viewUiAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    viewElementName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    viewConfig: z.optional(z.unknown()),
    defaultValue: z.optional(z.unknown()),
    settingDefinitions: z.optional(z.union([
        z.array(zPropertyDefinitionDto),
        z.null()
    ]))
});

export const zDiscountRuleProviderDto = z.object({
    icon: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    alias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    label: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    viewUiAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    viewElementName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    viewConfig: z.optional(z.unknown()),
    defaultValue: z.optional(z.unknown()),
    settingDefinitions: z.optional(z.union([
        z.array(zPropertyDefinitionDto),
        z.null()
    ]))
});

export const zEnumOptionDto = z.object({
    key: z.string(),
    label: z.string()
});

export const zEventMessageTypeModel = z.enum([
    'Default',
    'Info',
    'Error',
    'Success',
    'Warning'
]);

export const zExchangeRateServiceProviderDto = z.object({
    type: z.string()
});

export const zExportRequestDto = z.object({
    templateIds: z.array(z.uuid()),
    entityType: z.string(),
    entityIds: z.array(z.uuid()),
    languageIsoCode: z.string()
});

export const zExportTemplateDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    store: z.optional(z.union([
        zStoreBasicDto,
        zStoreDto,
        zStoreNamedReferenceDto,
        zStoreReferenceDto,
        z.null()
    ])),
    category: zTemplateCategory,
    fileMimeType: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    fileExtension: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    exportStrategy: zExportStrategy,
    templateView: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    sortOrder: z.optional(z.union([
        z.int(),
        z.null()
    ]))
});

export const zExportTemplateReferenceDto = z.object({
    id: z.uuid(),
    alias: z.string()
});

export const zFinalizeCartRequestDto = z.object({
    transactionId: z.string(),
    paymentStatus: z.string()
});

export const zGenerateCartPaymentLinkRequestDto = z.object({
    validityPeriod: z.int(),
    landingPageUrl: z.string()
});

export const zOrderCustomerInfoDto = z.object({
    firstName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    lastName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    email: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    telephone: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    customerReference: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zOrderBillingInfoDto = z.object({
    addressLine1: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    addressLine2: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    city: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    zipCode: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    country: z.optional(z.union([
        zCountryDto,
        zCountryNamedReferenceDto,
        zCountryReferenceDto,
        z.null()
    ])),
    region: z.optional(z.union([
        zRegionDto,
        zRegionNamedReferenceDto,
        zRegionReferenceDto,
        z.null()
    ])),
    companyName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    companyTaxCode: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    contact: z.optional(z.union([
        zContactDto,
        z.null()
    ]))
});

export const zOrderPaymentInfoDto = z.object({
    paymentMethod: z.optional(z.union([
        zPaymentMethodDto,
        zPaymentMethodNamedReferenceDto,
        zPaymentMethodReferenceDto,
        zPaymentMethodWithFeeDto,
        z.null()
    ])),
    taxRate: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    totalPrice: z.optional(z.union([
        zAdjustedPriceDto,
        z.null()
    ]))
});

export const zOrderShippingInfoDto = z.object({
    addressLine1: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    addressLine2: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    city: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    zipCode: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    country: z.optional(z.union([
        zCountryDto,
        zCountryNamedReferenceDto,
        zCountryReferenceDto,
        z.null()
    ])),
    region: z.optional(z.union([
        zRegionDto,
        zRegionNamedReferenceDto,
        zRegionReferenceDto,
        z.null()
    ])),
    companyName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    companyTaxCode: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    sameAsBilling: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    contact: z.optional(z.union([
        zContactDto,
        z.null()
    ])),
    shippingMethod: z.optional(z.union([
        zShippingMethodDto,
        zShippingMethodNamedReferenceDto,
        zShippingMethodReferenceDto,
        zShippingMethodWithRatesDto,
        z.null()
    ])),
    shippingOption: z.optional(z.union([
        zShippingOptionDto,
        z.null()
    ])),
    taxRate: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    totalPrice: z.optional(z.union([
        zAdjustedPriceDto,
        z.null()
    ]))
});

export const zPaymentStatus = z.enum([
    'Initialized',
    'Authorized',
    'Captured',
    'Cancelled',
    'Refunded',
    'PendingExternalSystem',
    'PartiallyRefunded',
    'Error'
]);

export const zTransactionActivityDto = z.object({
    id: z.uuid(),
    transactionId: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    amount: z.optional(z.union([
        zAmountDto,
        z.null()
    ])),
    fee: z.optional(z.union([
        zAmountDto,
        z.null()
    ])),
    reference: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    dateTimeUtc: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    paymentStatus: z.string(),
    metaData: z.optional(z.unknown())
});

export const zOrderTransactionInfoDto = z.object({
    transactionId: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    authorizedAmount: z.optional(z.union([
        zAmountDto,
        z.null()
    ])),
    feeAmount: z.optional(z.union([
        zAmountDto,
        z.null()
    ])),
    baseCurrencyExchangeRate: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    paymentStatus: zPaymentStatus,
    refundedAmount: z.optional(z.union([
        zAmountDto,
        z.null()
    ])),
    refundableAmount: z.optional(z.union([
        zAmountDto,
        z.null()
    ])),
    transactionActivities: z.array(zTransactionActivityDto)
});

export const zOrderAppliedDiscountCodeDto = z.object({
    discount: z.optional(z.union([
        zDiscountDto,
        zDiscountNamedReferenceDto,
        zDiscountReferenceDto,
        z.null()
    ])),
    code: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    isFulfilled: z.optional(z.union([
        z.boolean(),
        z.null()
    ]))
});

export const zGiftCardReferenceDto = z.object({
    id: z.uuid(),
    code: z.string()
});

export const zOrderLineDto = z.object({
    id: z.uuid(),
    productReference: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    productVariantReference: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    sku: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    quantity: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    taxClass: z.optional(z.union([
        zTaxClassDto,
        zTaxClassNamedReferenceDto,
        zTaxClassReferenceDto,
        z.null()
    ])),
    bundleId: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    orderLines: z.optional(z.union([
        z.array(z.lazy((): any => {
            return zOrderLineDto;
        })),
        z.null()
    ])),
    properties: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    attributes: z.optional(z.union([
        z.array(zAttributeCombinationDto),
        z.null()
    ])),
    basePrice: z.optional(z.union([
        zAdjustedPriceDto,
        z.null()
    ])),
    unitPrice: z.optional(z.union([
        zAdjustedPriceDto,
        z.null()
    ])),
    taxRate: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    totalPrice: z.optional(z.union([
        zAdjustedPriceWithPreviousAdjustmentsDto,
        z.null()
    ]))
});

export const zOrderNotesDto = z.object({
    customerNotes: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    internalNotes: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zOrderDto = z.object({
    id: z.uuid(),
    orderNumber: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    store: z.optional(z.union([
        zStoreBasicDto,
        zStoreDto,
        zStoreNamedReferenceDto,
        zStoreReferenceDto,
        z.null()
    ])),
    cartNumber: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    languageIsoCode: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    currency: z.optional(z.union([
        zCurrencyDto,
        zCurrencyNamedReferenceDto,
        zCurrencyReferenceDto,
        z.null()
    ])),
    taxClass: z.optional(z.union([
        zTaxClassDto,
        zTaxClassNamedReferenceDto,
        zTaxClassReferenceDto,
        z.null()
    ])),
    taxRate: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    orderStatus: z.optional(z.union([
        zOrderStatusDto,
        zOrderStatusNamedReferenceDto,
        zOrderStatusReferenceDto,
        z.null()
    ])),
    customer: z.optional(z.union([
        zOrderCustomerInfoDto,
        z.null()
    ])),
    billing: z.optional(z.union([
        zOrderBillingInfoDto,
        z.null()
    ])),
    payment: z.optional(z.union([
        zOrderPaymentInfoDto,
        z.null()
    ])),
    shipping: z.optional(z.union([
        zOrderShippingInfoDto,
        z.null()
    ])),
    transaction: z.optional(z.union([
        zOrderTransactionInfoDto,
        z.null()
    ])),
    discountCodes: z.optional(z.union([
        z.array(zOrderAppliedDiscountCodeDto),
        z.null()
    ])),
    discounts: z.optional(z.union([
        z.array(z.union([
            zDiscountDto,
            zDiscountNamedReferenceDto,
            zDiscountReferenceDto
        ])),
        z.null()
    ])),
    giftCards: z.optional(z.union([
        z.array(z.union([
            zGiftCardDto,
            zGiftCardReferenceDto
        ])),
        z.null()
    ])),
    totalQuantity: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    subtotalPrice: z.optional(z.union([
        zAdjustedPriceWithPreviousAdjustmentsDto,
        z.null()
    ])),
    totalPrice: z.optional(z.union([
        zAdjustedPriceWithPreviousAdjustmentsDto,
        z.null()
    ])),
    transactionAmount: z.optional(z.union([
        zAdjustedAmountDto,
        z.null()
    ])),
    orderLines: z.optional(z.union([
        z.array(zOrderLineDto),
        z.null()
    ])),
    properties: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    notes: z.optional(z.union([
        zOrderNotesDto,
        z.null()
    ])),
    tags: z.optional(z.union([
        z.array(z.string()),
        z.null()
    ])),
    createDate: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    updateDate: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    finalizedDate: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    isFinalized: z.optional(z.union([
        z.boolean(),
        z.null()
    ]))
});

export const zOrderReferenceDto = z.object({
    id: z.uuid(),
    orderNumber: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zGiftCardStatus = z.enum([
    'Active',
    'Inactive',
    'Expired',
    'Redeemed'
]);

export const zGiftCardDto = z.object({
    id: z.uuid(),
    code: z.string(),
    store: z.optional(z.union([
        zStoreBasicDto,
        zStoreDto,
        zStoreNamedReferenceDto,
        zStoreReferenceDto,
        z.null()
    ])),
    currency: z.optional(z.union([
        zCurrencyDto,
        zCurrencyNamedReferenceDto,
        zCurrencyReferenceDto,
        z.null()
    ])),
    order: z.optional(z.union([
        zOrderDto,
        zOrderReferenceDto,
        z.null()
    ])),
    originalAmount: z.optional(z.union([
        zAmountDto,
        z.null()
    ])),
    remainingAmount: z.optional(z.union([
        zAmountDto,
        z.null()
    ])),
    expiryDate: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    createDate: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    isActive: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    status: zGiftCardStatus,
    properties: z.optional(z.union([
        z.object({}),
        z.null()
    ]))
});

export const zIso3166RegionDto = z.object({
    code: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zIso3166CountryDto = z.object({
    code: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    regions: z.optional(z.union([
        z.array(zIso3166RegionDto),
        z.null()
    ]))
});

export const zLicensingStatusDto = z.object({
    isLicensed: z.boolean(),
    isTrial: z.boolean()
});

export const zMediaContentDto = z.object({
    id: z.int(),
    key: z.uuid()
});

export const zNotificationHeaderModel = z.object({
    message: z.string(),
    category: z.string(),
    type: zEventMessageTypeModel
});

export const zOrderlineRefundRequest = z.object({
    orderLineId: z.uuid(),
    quantity: z.number().gte(0).lte(2147483647)
});

export const zOrderRefundRequest = z.object({
    refundAmount: z.number().gte(0),
    orderlines: z.optional(z.union([
        z.array(zOrderlineRefundRequest),
        z.null()
    ])),
    restockProducts: z.boolean()
});

export const zPagedActivityLogEntryDto = z.object({
    total: z.coerce.bigint(),
    items: z.array(zActivityLogEntryDto)
});

export const zPagedGiftCardDto = z.object({
    total: z.coerce.bigint(),
    items: z.array(zGiftCardDto)
});

export const zPagedOrderDto = z.object({
    total: z.coerce.bigint(),
    items: z.array(zOrderDto)
});

export const zProductPriceDto = z.object({
    currency: z.optional(z.union([
        zCurrencyDto,
        zCurrencyNamedReferenceDto,
        zCurrencyReferenceDto,
        z.null()
    ])),
    value: z.optional(z.union([
        z.number(),
        z.null()
    ]))
});

export const zProductSummaryDto = z.object({
    productReference: z.string(),
    sku: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    prices: z.optional(z.union([
        z.array(zProductPriceDto),
        z.null()
    ])),
    attributes: z.optional(z.union([
        z.array(zAttributeDto),
        z.null()
    ])),
    stock: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    hasVariants: z.optional(z.union([
        z.boolean(),
        z.null()
    ]))
});

export const zPagedProductSummaryDto = z.object({
    total: z.coerce.bigint(),
    items: z.array(zProductSummaryDto)
});

export const zProductVariantSummaryDto = z.object({
    productReference: z.string(),
    sku: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    productVariantReference: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    prices: z.optional(z.union([
        z.array(zProductPriceDto),
        z.null()
    ])),
    attributes: z.optional(z.union([
        z.array(zAttributeCombinationDto),
        z.null()
    ])),
    stock: z.optional(z.union([
        z.number(),
        z.null()
    ]))
});

export const zPagedProductVariantSummaryDto = z.object({
    total: z.coerce.bigint(),
    items: z.array(zProductVariantSummaryDto)
});

export const zPaymentProviderSettingDto = z.object({
    alias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    label: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    viewUiAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    viewElementName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    viewConfig: z.optional(z.unknown()),
    editorAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    editorUiAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    editorElementName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    editorConfig: z.optional(z.unknown()),
    defaultValue: z.optional(z.unknown()),
    isAdvanced: z.optional(z.union([
        z.boolean(),
        z.null()
    ]))
});

export const zPaymentProviderDto = z.object({
    icon: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    alias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    label: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    isObsolete: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    supportedFeatures: z.optional(z.union([
        zPaymentProviderFeaturesDto,
        z.null()
    ])),
    transactionMetaDataDefinitions: z.optional(z.union([
        z.array(zPropertyDefinitionDto),
        z.null()
    ])),
    settingDefinitions: z.optional(z.union([
        z.array(zPaymentProviderSettingDto),
        z.null()
    ]))
});

export const zPrintTemplateDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.string(),
    store: z.optional(z.union([
        zStoreBasicDto,
        zStoreDto,
        zStoreNamedReferenceDto,
        zStoreReferenceDto,
        z.null()
    ])),
    category: zTemplateCategory,
    templateView: z.string()
});

export const zPrintTemplateReferenceDto = z.object({
    id: z.uuid(),
    alias: z.string()
});

export const zProblemDetails = z.object({
    type: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    title: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    status: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    detail: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    instance: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zTranslatedValueDto = z.object({
    alias: z.string(),
    defaultValue: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    values: z.optional(z.union([
        z.object({}),
        z.null()
    ]))
});

export const zProductAttributeDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.string(),
    store: z.optional(z.union([
        zStoreBasicDto,
        zStoreDto,
        zStoreNamedReferenceDto,
        zStoreReferenceDto,
        z.null()
    ])),
    attribute: z.optional(z.union([
        zTranslatedValueDto,
        z.null()
    ])),
    values: z.optional(z.union([
        z.array(zTranslatedValueDto),
        z.null()
    ])),
    sortOrder: z.optional(z.union([
        z.int(),
        z.null()
    ]))
});

export const zProductAttributePresetDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.string(),
    store: z.optional(z.union([
        zStoreBasicDto,
        zStoreDto,
        zStoreNamedReferenceDto,
        zStoreReferenceDto,
        z.null()
    ])),
    icon: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    attributes: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    sortOrder: z.optional(z.union([
        z.int(),
        z.null()
    ]))
});

export const zProductAttributePresetReferenceDto = z.object({
    id: z.uuid(),
    alias: z.string()
});

export const zProductAttributeReferenceDto = z.object({
    id: z.uuid(),
    alias: z.string()
});

export const zProductDto = z.object({
    productReference: z.string(),
    sku: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    productVariantReference: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    imageUrl: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    prices: z.optional(z.union([
        z.array(zProductPriceDto),
        z.null()
    ])),
    stock: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    attributes: z.optional(z.union([
        z.array(zAttributeCombinationDto),
        z.null()
    ])),
    taxClass: z.optional(z.union([
        zTaxClassDto,
        zTaxClassNamedReferenceDto,
        zTaxClassReferenceDto,
        z.null()
    ])),
    properties: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    isGiftCard: z.optional(z.union([
        z.boolean(),
        z.null()
    ]))
});

export const zProductStockDto = z.object({
    productReference: z.string(),
    productVariantReference: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    stock: z.optional(z.union([
        z.number(),
        z.null()
    ]))
});

export const zPropertyDefinitionGroupDto = z.object({
    group: z.string(),
    properties: z.optional(z.union([
        z.array(zPropertyDefinitionDto),
        z.null()
    ]))
});

export const zRenderRequestDto = z.object({
    templateIds: z.array(z.uuid()),
    entityType: z.string(),
    entityIds: z.array(z.uuid()),
    languageIsoCode: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zSalesTaxProviderSettingDto = z.object({
    alias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    label: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    viewUiAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    viewElementName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    viewConfig: z.optional(z.unknown()),
    editorAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    editorUiAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    editorElementName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    editorConfig: z.optional(z.unknown()),
    defaultValue: z.optional(z.unknown()),
    isAdvanced: z.optional(z.union([
        z.boolean(),
        z.null()
    ]))
});

export const zSalesTaxProviderDto = z.object({
    icon: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    alias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    label: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    isObsolete: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    settingDefinitions: z.optional(z.union([
        z.array(zSalesTaxProviderSettingDto),
        z.null()
    ]))
});

export const zScaffoldCountryRequestDto = z.object({
    iso3166CountryCode: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zScaffoldGiftCardRequestDto = z.object({
    currency: z.string()
});

export const zScaffoldPaymentMethodRequestDto = z.object({
    paymentProviderAlias: z.string()
});

export const zScaffoldShippingMethodRequestDto = z.object({
    shippingProviderAlias: z.string(),
    calculationMode: z.string()
});

export const zScaffoldTaxCalculationMethodRequestDto = z.object({
    salesTaxProviderAlias: z.string()
});

export const zSendEmailTemplateRequestDto = z.object({
    entity: z.string(),
    to: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    languageIsoCode: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zShippingProviderSettingDto = z.object({
    alias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    label: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    viewUiAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    viewElementName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    viewConfig: z.optional(z.unknown()),
    editorAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    editorUiAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    editorElementName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    editorConfig: z.optional(z.unknown()),
    defaultValue: z.optional(z.unknown()),
    isAdvanced: z.optional(z.union([
        z.boolean(),
        z.null()
    ]))
});

export const zShippingProviderDto = z.object({
    icon: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    alias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    label: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    supportsRealtimeRates: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    isObsolete: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    settingDefinitions: z.optional(z.union([
        z.array(zShippingProviderSettingDto),
        z.null()
    ]))
});

export const zShippingRateProviderDto = z.object({
    viewUiAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    viewElementName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    viewConfig: z.optional(z.unknown()),
    editorAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    editorUiAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    editorElementName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    editorConfig: z.optional(z.unknown()),
    defaultValue: z.optional(z.unknown()),
    alias: z.string(),
    label: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zShippingRateRangeProviderDto = z.object({
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    viewUiAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    viewElementName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    viewConfig: z.optional(z.unknown()),
    editorAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    editorUiAlias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    editorElementName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    editorConfig: z.optional(z.unknown()),
    defaultValue: z.optional(z.unknown()),
    alias: z.string(),
    label: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zStoreClaimsDto = z.object({
    id: z.uuid(),
    alias: z.string(),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    claims: z.array(z.string())
});

export const zStoreStatsDto = z.object({
    allTimeTotalRevenue: zAmountDto,
    allTimeTotalOrders: z.coerce.bigint(),
    totalRevenue: zAmountDto,
    totalOrders: z.coerce.bigint(),
    totalNewOrders: z.coerce.bigint(),
    totalAuthorizedOrders: z.coerce.bigint(),
    totalCapturedOrders: z.coerce.bigint(),
    totalRefundedOrders: z.coerce.bigint(),
    totalErroredOrders: z.coerce.bigint()
});

export const zStoreStatsRequestDto = z.object({
    date: z.iso.datetime(),
    localTimezoneOffset: z.optional(z.union([
        z.int(),
        z.null()
    ]))
});

export const zUpdateContactRequestDto = z.object({
    firstName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    lastName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    email: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    telephone: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zUpdateBillingRequestDto = z.object({
    addressLine1: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    addressLine2: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    city: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    zipCode: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    country: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    region: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    companyName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    companyTaxCode: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    contact: z.optional(z.union([
        zUpdateContactRequestDto,
        z.null()
    ]))
});

export const zUpdateCartLineRequestDto = z.object({
    id: z.optional(z.union([
        z.uuid(),
        z.null()
    ])),
    productReference: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    productVariantReference: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    quantity: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    properties: z.optional(z.union([
        z.object({}),
        z.null()
    ]))
});

export const zUpdateBundlableCartLineRequestDto = z.object({
    id: z.optional(z.union([
        z.uuid(),
        z.null()
    ])),
    productReference: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    productVariantReference: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    quantity: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    properties: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    bundleId: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    orderLines: z.optional(z.union([
        z.array(zUpdateCartLineRequestDto),
        z.null()
    ]))
});

export const zUpdateOrderLineRequestDto = z.object({
    id: z.uuid(),
    properties: z.optional(z.union([
        z.object({}),
        z.null()
    ]))
});

export const zUpdateBundlableOrderLineRequestDto = z.object({
    id: z.uuid(),
    properties: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    bundleId: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    orderLines: z.optional(z.union([
        z.array(zUpdateOrderLineRequestDto),
        z.null()
    ]))
});

export const zUpdateCartPaymentRequestDto = z.object({
    paymentMethod: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zUpdateCustomerRequestDto = z.object({
    firstName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    lastName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    email: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    telephone: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    customerReference: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zUpdateCartShippingRequestDto = z.object({
    addressLine1: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    addressLine2: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    city: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    zipCode: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    country: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    region: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    companyName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    companyTaxCode: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    contact: z.optional(z.union([
        zUpdateContactRequestDto,
        z.null()
    ])),
    sameAsBilling: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    shippingMethod: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    shippingOption: z.optional(z.union([
        zShippingOptionDto,
        z.null()
    ]))
});

export const zUpdateNotesRequestDto = z.object({
    customerNotes: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    internalNotes: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zUpdateCartRequestDto = z.object({
    customer: z.optional(z.union([
        zUpdateCustomerRequestDto,
        z.null()
    ])),
    billing: z.optional(z.union([
        zUpdateBillingRequestDto,
        z.null()
    ])),
    shipping: z.optional(z.union([
        zUpdateCartShippingRequestDto,
        z.null()
    ])),
    payment: z.optional(z.union([
        zUpdateCartPaymentRequestDto,
        z.null()
    ])),
    properties: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    orderLines: z.optional(z.union([
        z.array(zUpdateBundlableCartLineRequestDto),
        z.null()
    ])),
    notes: z.optional(z.union([
        zUpdateNotesRequestDto,
        z.null()
    ])),
    tags: z.optional(z.union([
        z.array(z.string()),
        z.null()
    ])),
    codes: z.optional(z.union([
        z.array(z.string()),
        z.null()
    ]))
});

export const zUpdateCountryRequestDto = z.object({
    code: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    taxCalculationMethod: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    defaultCurrency: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    defaultPaymentMethod: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    defaultShippingMethod: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zUpdateCurrencyRequestDto = z.object({
    code: z.string(),
    name: z.string(),
    culture: z.string(),
    formatTemplate: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    allowedCountries: z.array(zAllowedCountryRequestDto)
});

export const zUpdateDictionaryItemRequestDto = z.object({
    name: z.string(),
    translations: z.array(zDictionaryItemTranslationDto)
});

export const zUpdateDiscountRequestDto = z.object({
    alias: z.string(),
    name: z.string(),
    type: zDiscountType,
    codes: z.optional(z.union([
        z.array(zDiscountCodeDto),
        z.null()
    ])),
    rules: z.optional(z.union([
        zDiscountRuleConfigDto,
        z.null()
    ])),
    rewards: z.optional(z.union([
        z.array(zDiscountRewardConfigDto),
        z.null()
    ])),
    blockFurtherDiscounts: z.boolean(),
    blockIfPreviousDiscounts: z.boolean(),
    startDate: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    expiryDate: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    isActive: z.boolean()
});

export const zUpdateEmailTemplateRequestDto = z.object({
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    alias: z.string(),
    category: zTemplateCategory,
    subject: z.string(),
    senderName: z.string(),
    senderAddress: z.string(),
    replyToAddresses: z.optional(z.union([
        z.array(z.string()),
        z.null()
    ])),
    toAddresses: z.optional(z.union([
        z.array(z.string()),
        z.null()
    ])),
    ccAddresses: z.optional(z.union([
        z.array(z.string()),
        z.null()
    ])),
    bccAddresses: z.optional(z.union([
        z.array(z.string()),
        z.null()
    ])),
    sendToCustomer: z.boolean(),
    templateView: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zUpdateExportTemplateRequestDto = z.object({
    name: z.string(),
    alias: z.string(),
    category: zTemplateCategory,
    fileMimeType: z.string(),
    fileExtension: z.string(),
    exportStrategy: zExportStrategy,
    templateView: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zUpdateGiftCardRequestDto = z.object({
    code: z.string(),
    currency: z.string(),
    originalAmount: z.number(),
    remainingAmount: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    expiryDate: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    isActive: z.boolean(),
    properties: z.optional(z.union([
        z.object({}),
        z.null()
    ]))
});

export const zUpdateLocationRequestDto = z.object({
    alias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    addressLine1: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    addressLine2: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    city: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    region: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    countryIsoCode: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    zipCode: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    type: zLocationType
});

export const zUpdateShippingRequestDto = z.object({
    addressLine1: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    addressLine2: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    city: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    zipCode: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    country: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    region: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    companyName: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    companyTaxCode: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    contact: z.optional(z.union([
        zUpdateContactRequestDto,
        z.null()
    ])),
    sameAsBilling: z.optional(z.union([
        z.boolean(),
        z.null()
    ]))
});

export const zUpdateOrderRequestDto = z.object({
    orderStatus: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    customer: z.optional(z.union([
        zUpdateCustomerRequestDto,
        z.null()
    ])),
    billing: z.optional(z.union([
        zUpdateBillingRequestDto,
        z.null()
    ])),
    shipping: z.optional(z.union([
        zUpdateShippingRequestDto,
        z.null()
    ])),
    properties: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    orderLines: z.optional(z.union([
        z.array(zUpdateBundlableOrderLineRequestDto),
        z.null()
    ])),
    notes: z.optional(z.union([
        zUpdateNotesRequestDto,
        z.null()
    ])),
    tags: z.optional(z.union([
        z.array(z.string()),
        z.null()
    ]))
});

export const zUpdateOrderStatusRequestDto = z.object({
    alias: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    color: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zUpdatePaymentMethodRequestDto = z.object({
    alias: z.string(),
    name: z.string(),
    sku: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    taxClass: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    paymentProviderAlias: z.string(),
    paymentProviderSettings: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    enabledFeatures: z.optional(z.union([
        zPaymentProviderFeaturesDto,
        z.null()
    ])),
    allowedCountryRegions: z.optional(z.union([
        z.array(zAllowedCountryRegionRequestDto),
        z.null()
    ])),
    prices: z.optional(z.union([
        z.array(zServicePriceRequestDto),
        z.null()
    ]))
});

export const zUpdatePrintTemplateRequestDto = z.object({
    alias: z.string(),
    name: z.string(),
    category: zTemplateCategory,
    templateView: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zUpdateProductAttributePresetRequestDto = z.object({
    alias: z.string(),
    name: z.string(),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    icon: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    attributes: z.object({})
});

export const zUpdateProductAttributeRequestDto = z.object({
    attribute: zTranslatedValueRequestDto,
    values: z.array(zTranslatedValueRequestDto)
});

export const zUpdateProductRequestDto = z.object({
    stockIncrement: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    stockDecrement: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    stock: z.optional(z.union([
        z.number(),
        z.null()
    ]))
});

export const zUpdateRegionRequestDto = z.object({
    code: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    defaultPaymentMethod: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    defaultShippingMethod: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zUpdateShippingMethodRequestDto = z.object({
    alias: z.string(),
    name: z.string(),
    sku: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    taxClass: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    imageId: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    shippingProviderAlias: z.string(),
    calculationMode: z.string(),
    shippingProviderSettings: z.optional(z.union([
        z.object({}),
        z.null()
    ])),
    allowedCountryRegions: z.optional(z.union([
        z.array(zAllowedCountryRegionRequestDto),
        z.null()
    ])),
    calculationConfig: z.optional(z.union([
        zDynamicRateShippingCalculationConfigRequestDto,
        zFixedRateShippingCalculationConfigRequestDto,
        zRealtimeRateShippingCalculationConfigRequestDto,
        z.null()
    ]))
});

export const zUpdateStoreRequestDto = z.object({
    name: z.string(),
    alias: z.string(),
    baseCurrency: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    defaultLocation: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    defaultCountry: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    defaultTaxClass: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    defaultOrderStatus: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    errorOrderStatus: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    measurementSystem: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    pricesIncludeTax: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    canRefundTransactionFee: z.boolean(),
    useCookies: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    cookieTimeout: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    confirmationEmailTemplate: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    errorEmailTemplate: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    abandonedCartEmailTemplate: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    abandonedCartInactivityPeriod: z.int().gte(0).lte(2147483647),
    abandonedCartLandingPageUrl: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    cartNumberTemplate: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    orderNumberTemplate: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    orderRoundingMethod: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    productPropertyAliases: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    productUniquenessPropertyAliases: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    giftCardCodeLength: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    giftCardDaysValid: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    giftCardCodeTemplate: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    giftCardPropertyAliases: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    giftCardActivationMethod: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    giftCardActivationOrderStatus: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    defaultGiftCardEmailTemplate: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    allowedUsers: z.optional(z.union([
        z.array(z.string()),
        z.null()
    ])),
    allowedUserRoles: z.optional(z.union([
        z.array(z.string()),
        z.null()
    ])),
    logoImageUrl: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    themeColor: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zUpdateTaxCalculationMethodRequestDto = z.object({
    alias: z.string(),
    name: z.string(),
    salesTaxProviderAlias: z.string(),
    salesTaxProviderSettings: z.optional(z.union([
        z.object({}),
        z.null()
    ]))
});

export const zUpdateTaxClassRequestDto = z.object({
    alias: z.string(),
    name: z.string(),
    defaultTaxRate: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    defaultTaxCode: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    countryRegionTaxClasses: z.optional(z.union([
        z.array(zCountryRegionTaxClassRequestDto),
        z.null()
    ]))
});

export const zUserSessionDto = z.object({
    stores: z.array(zStoreClaimsDto)
});

export const zGetActivityLogEntriesByStoreIdData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string()),
        skip: z.optional(z.int()).default(0),
        take: z.optional(z.int()).default(100)
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetActivityLogEntriesByStoreIdResponse = zPagedActivityLogEntryDto;

export const zGetActivityLogEntriesByEntityIdAndTypeData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        entityType: z.string(),
        entityId: z.uuid()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string()),
        skip: z.optional(z.int()).default(0),
        take: z.optional(z.int()).default(100)
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetActivityLogEntriesByEntityIdAndTypeResponse = zPagedActivityLogEntryDto;

export const zGetAbandonedCartConversionRatesData = z.object({
    body: z.optional(zAnalyticsWidgetRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetAbandonedCartConversionRatesResponse = zAnalyticsAbandonedCartConversionRatesDataDto;

export const zGetAverageOrderValueData = z.object({
    body: z.optional(zAnalyticsWidgetRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetAverageOrderValueResponse = zAnalyticsAverageOrderValueDataDto;

export const zGetCartConversionRatesData = z.object({
    body: z.optional(zAnalyticsWidgetRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetCartConversionRatesResponse = zAnalyticsCartConversionRatesDataDto;

export const zGetRepeatCustomerRatesData = z.object({
    body: z.optional(zAnalyticsWidgetRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetRepeatCustomerRatesResponse = zAnalyticsRepeatCustomerRatesDataDto;

export const zGetTopSellingProductsData = z.object({
    body: z.optional(zAnalyticsWidgetRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetTopSellingProductsResponse = zAnalyticsProductSalesDataDto;

export const zGetTotalOrdersData = z.object({
    body: z.optional(zAnalyticsWidgetRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetTotalOrdersResponse = zAnalyticsTotalOrdersDataDto;

export const zGetTotalRevenueData = z.object({
    body: z.optional(zAnalyticsWidgetRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetTotalRevenueResponse = zAnalyticsTotalRevenueDataDto;

export const zGetCartsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string()),
        filter: z.optional(z.array(z.string())),
        skip: z.optional(z.int()).default(0),
        take: z.optional(z.int()).default(100)
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetCartsResponse = zPagedOrderDto;

export const zCreateCartData = z.object({
    body: z.optional(zCreateCartRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateCartResponse = zOrderDto;

export const zDeleteCartByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        cartId: z.uuid()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zDeleteCartByIdResponse = zOrderReferenceDto;

export const zGetCartByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        cartId: z.uuid()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetCartByIdResponse = zOrderDto;

export const zUpdateCartByIdData = z.object({
    body: z.optional(zUpdateCartRequestDto),
    path: z.object({
        cartId: z.uuid()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zUpdateCartByIdResponse = zOrderDto;

export const zCalculateCartByIdData = z.object({
    body: z.optional(zUpdateCartRequestDto),
    path: z.object({
        cartId: z.uuid()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCalculateCartByIdResponse = zOrderDto;

export const zCalculateCartPaymentMethodsByIdData = z.object({
    body: z.optional(zUpdateCartRequestDto),
    path: z.object({
        cartId: z.uuid()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCalculateCartPaymentMethodsByIdResponse = z.array(zPaymentMethodWithFeeDto);

export const zCalculateCartShippingMethodsByIdData = z.object({
    body: z.optional(zUpdateCartRequestDto),
    path: z.object({
        cartId: z.uuid()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCalculateCartShippingMethodsByIdResponse = z.array(zShippingMethodWithRatesDto);

export const zFinalizeCartData = z.object({
    body: z.optional(zFinalizeCartRequestDto),
    path: z.object({
        cartId: z.uuid()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zFinalizeCartResponse = zOrderDto;

export const zGenerateCartPaymentLinkByIdData = z.object({
    body: z.optional(zGenerateCartPaymentLinkRequestDto),
    path: z.object({
        cartId: z.uuid()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGenerateCartPaymentLinkByIdResponse = zCartPaymentLinkDto;

export const zProcessAbandonedCartData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        cartId: z.uuid()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zProcessAbandonedCartResponse = zOrderDto;

export const zGetCartAdvancedFiltersData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetCartAdvancedFiltersResponse = z.array(zPropertyDefinitionGroupDto);

export const zGetStoreByContentNodeIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        unique: z.uuid()
    }),
    query: z.optional(z.object({
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetStoreByContentNodeIdResponse = zStoreBasicDto;

export const zGetCountriesData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetCountriesResponse = z.array(z.union([
    zCountryDto,
    zCountryNamedReferenceDto,
    zCountryReferenceDto
]));

export const zCreateCountryData = z.object({
    body: z.optional(zCreateCountryRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateCountryResponse = z.union([
    zCountryDto,
    zCountryNamedReferenceDto,
    zCountryReferenceDto
]);

export const zDeleteCountryByIdOrCodeData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        countryIdOrCode: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zDeleteCountryByIdOrCodeResponse = zCountryReferenceDto;

export const zGetCountryByIdOrCodeData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        countryIdOrCode: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetCountryByIdOrCodeResponse = z.union([
    zCountryDto,
    zCountryNamedReferenceDto,
    zCountryReferenceDto
]);

export const zUpdateCountryByIdOrCodeData = z.object({
    body: z.optional(zUpdateCountryRequestDto),
    path: z.object({
        countryIdOrCode: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zUpdateCountryByIdOrCodeResponse = z.union([
    zCountryDto,
    zCountryNamedReferenceDto,
    zCountryReferenceDto
]);

export const zGetRegionsData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        countryIdOrCode: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetRegionsResponse = z.array(zRegionDto);

export const zCreateRegionData = z.object({
    body: z.optional(zCreateRegionRequestDto),
    path: z.object({
        countryIdOrCode: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateRegionResponse = zRegionDto;

export const zDeleteRegionByIdOrCodeData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        countryIdOrCode: z.string(),
        regionIdOrCode: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zDeleteRegionByIdOrCodeResponse = zRegionReferenceDto;

export const zGetRegionByIdOrCodeData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        countryIdOrCode: z.string(),
        regionIdOrCode: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetRegionByIdOrCodeResponse = zRegionDto;

export const zUpdateRegionByIdOrCodeData = z.object({
    body: z.optional(zUpdateRegionRequestDto),
    path: z.object({
        countryIdOrCode: z.string(),
        regionIdOrCode: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zUpdateRegionByIdOrCodeResponse = zRegionDto;

export const zAutoCreateRegionsData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        countryIdOrCode: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zAutoCreateRegionsResponse = z.array(z.union([
    zRegionDto,
    zRegionNamedReferenceDto,
    zRegionReferenceDto
]));

export const zCreateRegionScaffoldData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        countryIdOrCode: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateRegionScaffoldResponse = zRegionDto;

export const zSortRegionsData = z.object({
    body: z.optional(z.array(z.string())),
    path: z.object({
        countryIdOrCode: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

export const zAutoCreateCountriesAndRegionsData = z.object({
    body: z.optional(zAutoCreateCountriesAndRegionsRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zAutoCreateCountriesAndRegionsResponse = z.array(z.union([
    zCountryDto,
    zCountryNamedReferenceDto,
    zCountryReferenceDto
]));

export const zGetIso3166CountriesData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetIso3166CountriesResponse = z.array(zIso3166CountryDto);

export const zCreateCountryScaffoldData = z.object({
    body: z.optional(zScaffoldCountryRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateCountryScaffoldResponse = z.union([
    zCountryDto,
    zCountryNamedReferenceDto,
    zCountryReferenceDto
]);

export const zSortCountriesData = z.object({
    body: z.optional(z.array(z.string())),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

export const zGetCurrenciesData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetCurrenciesResponse = z.array(zCurrencyDto);

export const zCreateCurrencyData = z.object({
    body: z.optional(zCreateCurrencyRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateCurrencyResponse = zCurrencyDto;

export const zDeleteCurrencyByIdOrCodeData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        currencyIdOrCode: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zDeleteCurrencyByIdOrCodeResponse = zCurrencyReferenceDto;

export const zGetCurrencyByIdOrCodeData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        currencyIdOrCode: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetCurrencyByIdOrCodeResponse = zCurrencyDto;

export const zUpdateCurrencyByIdOrCodeData = z.object({
    body: z.optional(zUpdateCurrencyRequestDto),
    path: z.object({
        currencyIdOrCode: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zUpdateCurrencyByIdOrCodeResponse = zCurrencyDto;

export const zCreateCurrencyScaffoldData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateCurrencyScaffoldResponse = zCurrencyDto;

export const zSortCurrenciesData = z.object({
    body: z.optional(z.array(z.string())),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

export const zGetCustomerByReferenceOrEmailData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        customerReferenceOrEmail: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetCustomerByReferenceOrEmailResponse = zCustomerDto;

export const zGetCustomerOrderHistoryByReferenceOrEmailData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        customerReferenceOrEmail: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetCustomerOrderHistoryByReferenceOrEmailResponse = z.array(zOrderDto);

export const zCreateDictionaryItemData = z.object({
    body: z.optional(zCreateDictionaryItemRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateDictionaryItemResponse = zDictionaryItemDto;

export const zUpdateDictionaryItemByIdData = z.object({
    body: z.optional(zUpdateDictionaryItemRequestDto),
    path: z.object({
        dictionaryItemId: z.uuid()
    }),
    query: z.optional(z.object({
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zUpdateDictionaryItemByIdResponse = zDictionaryItemDto;

export const zGetDictionaryItemByKeyData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        dictionaryItemKey: z.string()
    }),
    query: z.optional(z.object({
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetDictionaryItemByKeyResponse = zDictionaryItemDto;

export const zGetDiscountRewardProvidersData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetDiscountRewardProvidersResponse = z.array(zDiscountRewardProviderDto);

export const zGetDiscountRuleProvidersData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetDiscountRuleProvidersResponse = z.array(zDiscountRuleProviderDto);

export const zGetDiscountsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string()),
        filter: z.optional(z.array(z.string()))
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetDiscountsResponse = z.array(zDiscountDto);

export const zCreateDiscountData = z.object({
    body: z.optional(zCreateDiscountRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateDiscountResponse = zDiscountDto;

export const zDeleteDiscountByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        discountIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zDeleteDiscountByIdOrAliasResponse = zDiscountReferenceDto;

export const zGetDiscountByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        discountIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetDiscountByIdOrAliasResponse = zDiscountDto;

export const zUpdateDiscountByIdOrAliasData = z.object({
    body: z.optional(zUpdateDiscountRequestDto),
    path: z.object({
        discountIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zUpdateDiscountByIdOrAliasResponse = zDiscountDto;

export const zCreateDiscountScaffoldData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateDiscountScaffoldResponse = zDiscountDto;

export const zSortDiscountsData = z.object({
    body: z.optional(z.array(z.string())),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

export const zGetEmailTemplatesData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string()),
        filter: z.optional(z.array(z.string()))
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetEmailTemplatesResponse = z.array(zEmailTemplateDto);

export const zCreateEmailTemplateData = z.object({
    body: z.optional(zCreateEmailTemplateRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateEmailTemplateResponse = zEmailTemplateDto;

export const zDeleteEmailTemplateByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        emailTemplateIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zDeleteEmailTemplateByIdOrAliasResponse = zEmailTemplateReferenceDto;

export const zGetEmailTemplateByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        emailTemplateIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetEmailTemplateByIdOrAliasResponse = zEmailTemplateDto;

export const zUpdateEmailTemplateByIdOrAliasData = z.object({
    body: z.optional(zUpdateEmailTemplateRequestDto),
    path: z.object({
        emailTemplateIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zUpdateEmailTemplateByIdOrAliasResponse = zEmailTemplateDto;

export const zSendEmailTemplateByIdOrAliasData = z.object({
    body: z.optional(zSendEmailTemplateRequestDto),
    path: z.object({
        emailTemplateIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

export const zCreateEmailTemplateScaffoldData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateEmailTemplateScaffoldResponse = zEmailTemplateDto;

export const zSortEmailTemplatesData = z.object({
    body: z.optional(z.array(z.string())),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

export const zGetExportTemplatesData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string()),
        filter: z.optional(z.array(z.string()))
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetExportTemplatesResponse = z.array(zExportTemplateDto);

export const zCreateExportTemplateData = z.object({
    body: z.optional(zCreateExportTemplateRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateExportTemplateResponse = zExportTemplateDto;

export const zDeleteExportTemplateByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        exportTemplateIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zDeleteExportTemplateByIdOrAliasResponse = zExportTemplateReferenceDto;

export const zGetExportTemplateByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        exportTemplateIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetExportTemplateByIdOrAliasResponse = zExportTemplateDto;

export const zUpdateExportTemplateByIdOrAliasData = z.object({
    body: z.optional(zUpdateExportTemplateRequestDto),
    path: z.object({
        exportTemplateIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zUpdateExportTemplateByIdOrAliasResponse = zExportTemplateDto;

export const zExportData = z.object({
    body: z.optional(zExportRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zExportResponse = z.string();

export const zCreateExportTemplateScaffoldData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateExportTemplateScaffoldResponse = zExportTemplateDto;

export const zSortExportTemplatesData = z.object({
    body: z.optional(z.array(z.string())),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

export const zGetGiftCardsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string()),
        filter: z.optional(z.array(z.string())),
        skip: z.optional(z.int()).default(0),
        take: z.optional(z.int()).default(100)
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetGiftCardsResponse = zPagedGiftCardDto;

export const zCreateGiftCardData = z.object({
    body: z.optional(zCreateGiftCardRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateGiftCardResponse = zGiftCardDto;

export const zDeleteGiftCardByIdOrCodeData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        giftCardIdOrCode: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zDeleteGiftCardByIdOrCodeResponse = zGiftCardReferenceDto;

export const zGetGiftCardByIdOrCodeData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        giftCardIdOrCode: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetGiftCardByIdOrCodeResponse = zGiftCardDto;

export const zUpdateGiftCardByIdOrCodeData = z.object({
    body: z.optional(zUpdateGiftCardRequestDto),
    path: z.object({
        giftCardIdOrCode: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zUpdateGiftCardByIdOrCodeResponse = zGiftCardDto;

export const zGenerateGiftCardCodeData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGenerateGiftCardCodeResponse = z.string();

export const zCreateGiftCardScaffoldData = z.object({
    body: z.optional(zScaffoldGiftCardRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateGiftCardScaffoldResponse = zGiftCardDto;

export const zGetLocationsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetLocationsResponse = z.array(zLocationDto);

export const zCreateLocationData = z.object({
    body: z.optional(zCreateLocationRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateLocationResponse = zLocationDto;

export const zDeleteLocationByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        locationIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zDeleteLocationByIdOrAliasResponse = zLocationReferenceDto;

export const zGetLocationByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        locationIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetLocationByIdOrAliasResponse = zLocationDto;

export const zUpdateLocationByIdOrAliasData = z.object({
    body: z.optional(zUpdateLocationRequestDto),
    path: z.object({
        locationIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zUpdateLocationByIdOrAliasResponse = zLocationDto;

export const zCreateLocationScaffoldData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateLocationScaffoldResponse = zLocationDto;

export const zSortLocationsData = z.object({
    body: z.optional(z.array(z.string())),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

export const zGetOrderStatusesData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetOrderStatusesResponse = z.array(zOrderStatusDto);

export const zCreateOrderStatusData = z.object({
    body: z.optional(zCreateOrderStatusRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateOrderStatusResponse = zOrderStatusDto;

export const zDeleteOrderStatusByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        orderStatusIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zDeleteOrderStatusByIdOrAliasResponse = zOrderStatusReferenceDto;

export const zGetOrderStatusByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        orderStatusIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetOrderStatusByIdOrAliasResponse = zOrderStatusDto;

export const zUpdateOrderStatusByIdOrAliasData = z.object({
    body: z.optional(zUpdateOrderStatusRequestDto),
    path: z.object({
        orderStatusIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zUpdateOrderStatusByIdOrAliasResponse = zOrderStatusDto;

export const zCreateOrderStatusScaffoldData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateOrderStatusScaffoldResponse = zOrderStatusDto;

export const zSortOrderStatusesData = z.object({
    body: z.optional(z.array(z.string())),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

export const zGetOrdersData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string()),
        filter: z.optional(z.array(z.string())),
        skip: z.optional(z.int()).default(0),
        take: z.optional(z.int()).default(100)
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetOrdersResponse = zPagedOrderDto;

export const zDeleteOrderByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        orderId: z.uuid()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zDeleteOrderByIdResponse = zOrderReferenceDto;

export const zGetOrderByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        orderId: z.uuid()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetOrderByIdResponse = zOrderDto;

export const zUpdateOrderByIdData = z.object({
    body: z.optional(zUpdateOrderRequestDto),
    path: z.object({
        orderId: z.uuid()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zUpdateOrderByIdResponse = zOrderDto;

export const zCancelOrderPaymentByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        orderId: z.uuid()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCancelOrderPaymentByIdResponse = zOrderDto;

export const zCaptureOrderPaymentByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        orderId: z.uuid()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCaptureOrderPaymentByIdResponse = zOrderDto;

export const zRefundOrderPaymentByIdData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        orderId: z.uuid()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zRefundOrderPaymentByIdResponse = zOrderDto;

export const zRefundOrderPaymentByIdV2Data = z.object({
    body: z.optional(zOrderRefundRequest),
    path: z.object({
        orderId: z.uuid()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zRefundOrderPaymentByIdV2Response = zOrderDto;

export const zGetOrderAdvancedFiltersData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetOrderAdvancedFiltersResponse = z.array(zPropertyDefinitionGroupDto);

export const zGetPaymentMethodsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetPaymentMethodsResponse = z.array(zPaymentMethodDto);

export const zCreatePaymentMethodData = z.object({
    body: z.optional(zCreatePaymentMethodRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreatePaymentMethodResponse = zPaymentMethodDto;

export const zDeletePaymentMethodByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        paymentMethodIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zDeletePaymentMethodByIdOrAliasResponse = zPaymentMethodReferenceDto;

export const zGetPaymentMethodByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        paymentMethodIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetPaymentMethodByIdOrAliasResponse = zPaymentMethodDto;

export const zUpdatePaymentMethodByIdOrAliasData = z.object({
    body: z.optional(zUpdatePaymentMethodRequestDto),
    path: z.object({
        paymentMethodIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zUpdatePaymentMethodByIdOrAliasResponse = zPaymentMethodDto;

export const zCreatePaymentMethodScaffoldData = z.object({
    body: z.optional(zScaffoldPaymentMethodRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreatePaymentMethodScaffoldResponse = zPaymentMethodDto;

export const zSortPaymentMethodsData = z.object({
    body: z.optional(z.array(z.string())),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

export const zGetPaymentProvidersData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetPaymentProvidersResponse = z.array(zPaymentProviderDto);

export const zGetPaymentProviderByAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        paymentProviderAlias: z.string()
    }),
    query: z.optional(z.object({
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetPaymentProviderByAliasResponse = zPaymentProviderDto;

export const zGetPrintTemplatesData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string()),
        filter: z.optional(z.array(z.string()))
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetPrintTemplatesResponse = z.array(zPrintTemplateDto);

export const zCreatePrintTemplateData = z.object({
    body: z.optional(zCreatePrintTemplateRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreatePrintTemplateResponse = zPrintTemplateDto;

export const zDeletePrintTemplateByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        printTemplateIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zDeletePrintTemplateByIdOrAliasResponse = zPrintTemplateReferenceDto;

export const zGetPrintTemplateByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        printTemplateIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetPrintTemplateByIdOrAliasResponse = zPrintTemplateDto;

export const zUpdatePrintTemplateByIdOrAliasData = z.object({
    body: z.optional(zUpdatePrintTemplateRequestDto),
    path: z.object({
        printTemplateIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zUpdatePrintTemplateByIdOrAliasResponse = zPrintTemplateDto;

export const zRenderData = z.object({
    body: z.optional(zRenderRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zRenderResponse = z.string();

export const zCreatePrintTemplateScaffoldData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreatePrintTemplateScaffoldResponse = zPrintTemplateDto;

export const zSortPrintTemplatesData = z.object({
    body: z.optional(z.array(z.string())),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

export const zGetProductAttributePresetsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetProductAttributePresetsResponse = z.array(zProductAttributePresetDto);

export const zCreateProductAttributePresetData = z.object({
    body: z.optional(zCreateProductAttributePresetRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateProductAttributePresetResponse = zProductAttributePresetDto;

export const zDeleteProductAttributePresetByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        productAttributePresetIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zDeleteProductAttributePresetByIdOrAliasResponse = zProductAttributePresetReferenceDto;

export const zGetProductAttributePresetByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        productAttributePresetIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetProductAttributePresetByIdOrAliasResponse = zProductAttributePresetDto;

export const zUpdateProductAttributePresetByIdOrAliasData = z.object({
    body: z.optional(zUpdateProductAttributePresetRequestDto),
    path: z.object({
        productAttributePresetIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zUpdateProductAttributePresetByIdOrAliasResponse = zProductAttributePresetDto;

export const zCreateProductAttributePresetScaffoldData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateProductAttributePresetScaffoldResponse = zProductAttributePresetDto;

export const zSortProductAttributePresetsData = z.object({
    body: z.optional(z.array(z.string())),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

export const zGetProductAttributesData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetProductAttributesResponse = z.array(zProductAttributeDto);

export const zCreateProductAttributeData = z.object({
    body: z.optional(zCreateProductAttributeRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateProductAttributeResponse = zProductAttributeDto;

export const zDeleteProductAttributeByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        productAttributeIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zDeleteProductAttributeByIdOrAliasResponse = zProductAttributeReferenceDto;

export const zGetProductAttributeByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        productAttributeIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetProductAttributeByIdOrAliasResponse = zProductAttributeDto;

export const zUpdateProductAttributeByIdOrAliasData = z.object({
    body: z.optional(zUpdateProductAttributeRequestDto),
    path: z.object({
        productAttributeIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zUpdateProductAttributeByIdOrAliasResponse = zProductAttributeDto;

export const zCreateProductAttributeScaffoldData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateProductAttributeScaffoldResponse = zProductAttributeDto;

export const zSortProductAttributesData = z.object({
    body: z.optional(z.array(z.string())),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

export const zGetProductByReferenceData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        productReference: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetProductByReferenceResponse = zProductDto;

export const zUpdateProductByReferenceData = z.object({
    body: z.optional(zUpdateProductRequestDto),
    path: z.object({
        productReference: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zUpdateProductByReferenceResponse = zProductDto;

export const zGetProductVariantAttributesData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        productReference: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetProductVariantAttributesResponse = z.array(zAttributeDto);

export const zGetProductVariantByReferenceData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        productReference: z.string(),
        productVariantReference: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetProductVariantByReferenceResponse = zProductDto;

export const zUpdateProductVariantByReferenceData = z.object({
    body: z.optional(zUpdateProductRequestDto),
    path: z.object({
        productReference: z.string(),
        productVariantReference: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zUpdateProductVariantByReferenceResponse = zProductDto;

export const zGetProductVariantStockByReferenceData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        productReferences: z.array(z.string())
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetProductVariantStockByReferenceResponse = z.array(zProductStockDto);

export const zGetProductSummariesData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string()),
        filter: z.optional(z.array(z.string())),
        skip: z.optional(z.int()).default(0),
        take: z.optional(z.int()).default(100)
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetProductSummariesResponse = zPagedProductSummaryDto;

export const zGetProductVariantSummariesData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        productReference: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string()),
        filter: z.optional(z.array(z.string())),
        skip: z.optional(z.int()).default(0),
        take: z.optional(z.int()).default(100)
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetProductVariantSummariesResponse = zPagedProductVariantSummaryDto;

export const zGetSalesTaxProvidersData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetSalesTaxProvidersResponse = z.array(zSalesTaxProviderDto);

export const zGetSalesTaxProviderByAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        salesTaxProviderAlias: z.string()
    }),
    query: z.optional(z.object({
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetSalesTaxProviderByAliasResponse = zSalesTaxProviderDto;

export const zGetSessionData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zGetSessionResponse = zUserSessionDto;

export const zGetShippingMethodsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetShippingMethodsResponse = z.array(zShippingMethodDto);

export const zCreateShippingMethodData = z.object({
    body: z.optional(zCreateShippingMethodRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateShippingMethodResponse = zShippingMethodDto;

export const zDeleteShippingMethodByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        shippingMethodIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zDeleteShippingMethodByIdOrAliasResponse = zShippingMethodReferenceDto;

export const zGetShippingMethodByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        shippingMethodIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetShippingMethodByIdOrAliasResponse = zShippingMethodDto;

export const zUpdateShippingMethodByIdOrAliasData = z.object({
    body: z.optional(zUpdateShippingMethodRequestDto),
    path: z.object({
        shippingMethodIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zUpdateShippingMethodByIdOrAliasResponse = zShippingMethodDto;

export const zCreateShippingMethodScaffoldData = z.object({
    body: z.optional(zScaffoldShippingMethodRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateShippingMethodScaffoldResponse = zShippingMethodDto;

export const zSortShippingMethodsData = z.object({
    body: z.optional(z.array(z.string())),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

export const zGetShippingProvidersData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetShippingProvidersResponse = z.array(zShippingProviderDto);

export const zGetShippingProviderByAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        shippingProviderAlias: z.string()
    }),
    query: z.optional(z.object({
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetShippingProviderByAliasResponse = zShippingProviderDto;

export const zGetShippingRateProvidersData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetShippingRateProvidersResponse = z.array(zShippingRateProviderDto);

export const zGetShippingRateRangeProvidersData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetShippingRateRangeProvidersResponse = z.array(zShippingRateRangeProviderDto);

export const zGetStoresData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetStoresResponse = z.array(zStoreDto);

export const zCreateStoreData = z.object({
    body: z.optional(zCreateStoreRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateStoreResponse = zStoreDto;

export const zDeleteStoreByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        storeIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zDeleteStoreByIdOrAliasResponse = zStoreReferenceDto;

export const zGetStoreByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        storeIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetStoreByIdOrAliasResponse = zStoreDto;

export const zUpdateStoreByIdOrAliasData = z.object({
    body: z.optional(zUpdateStoreRequestDto),
    path: z.object({
        storeIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zUpdateStoreByIdOrAliasResponse = zStoreDto;

export const zGetStoreStatsByIdOrAliasData = z.object({
    body: z.optional(zStoreStatsRequestDto),
    path: z.object({
        storeIdOrAlias: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zGetStoreStatsByIdOrAliasResponse = zStoreStatsDto;

export const zSortStoresData = z.object({
    body: z.optional(z.array(z.string())),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        'Accept-Language': z.optional(z.string())
    }))
});

export const zGetTaxCalculationMethodsData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetTaxCalculationMethodsResponse = z.array(zTaxCalculationMethodDto);

export const zCreateTaxCalculationMethodData = z.object({
    body: z.optional(zCreateTaxCalculationMethodRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateTaxCalculationMethodResponse = zTaxCalculationMethodDto;

export const zDeleteTaxCalculationMethodByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        taxCalculationMethodIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zDeleteTaxCalculationMethodByIdOrAliasResponse = zTaxCalculationMethodReferenceDto;

export const zGetTaxCalculationMethodByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        taxCalculationMethodIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetTaxCalculationMethodByIdOrAliasResponse = zTaxCalculationMethodDto;

export const zUpdateTaxCalculationMethodByIdOrAliasData = z.object({
    body: z.optional(zUpdateTaxCalculationMethodRequestDto),
    path: z.object({
        taxCalculationMethodIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zUpdateTaxCalculationMethodByIdOrAliasResponse = zTaxCalculationMethodDto;

export const zCreateTaxCalculationMethodScaffoldData = z.object({
    body: z.optional(zScaffoldTaxCalculationMethodRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateTaxCalculationMethodScaffoldResponse = zTaxCalculationMethodDto;

export const zSortTaxCalculationMethodsData = z.object({
    body: z.optional(z.array(z.string())),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

export const zGetTaxClassesData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetTaxClassesResponse = z.array(zTaxClassDto);

export const zCreateTaxClassData = z.object({
    body: z.optional(zCreateTaxClassRequestDto),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateTaxClassResponse = zTaxClassDto;

export const zDeleteTaxClassByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        taxClassIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zDeleteTaxClassByIdOrAliasResponse = zTaxClassReferenceDto;

export const zGetTaxClassByIdOrAliasData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        taxClassIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetTaxClassByIdOrAliasResponse = zTaxClassDto;

export const zUpdateTaxClassByIdOrAliasData = z.object({
    body: z.optional(zUpdateTaxClassRequestDto),
    path: z.object({
        taxClassIdOrAlias: z.string()
    }),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zUpdateTaxClassByIdOrAliasResponse = zTaxClassDto;

export const zCreateTaxClassScaffoldData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string()),
        fields: z.optional(z.string()),
        expand: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zCreateTaxClassScaffoldResponse = zTaxClassDto;

export const zSortTaxClassesData = z.object({
    body: z.optional(z.array(z.string())),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        LanguageIsoCode: z.optional(z.string())
    })),
    headers: z.optional(z.object({
        store: z.optional(z.string()),
        'Accept-Language': z.optional(z.string())
    }))
});

export const zGetCulturesData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zGetCulturesResponse = z.array(zCultureDto);

export const zGetEnumOptionsByTypeData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        type: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zGetEnumOptionsByTypeResponse = z.array(zEnumOptionDto);

export const zGetExchangeRateServiceProviderData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zGetExchangeRateServiceProviderResponse = zExchangeRateServiceProviderDto;

export const zGetLicensingStatusData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * OK
 */
export const zGetLicensingStatusResponse = zLicensingStatusDto;

export const zGetMediaFromUrlData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        url: z.optional(z.string())
    }))
});

/**
 * OK
 */
export const zGetMediaFromUrlResponse = zMediaContentDto;